[{"D:\\github\\reactjs\\storx-farmer\\src\\index.js":"1","D:\\github\\reactjs\\storx-farmer\\src\\App.js":"2","D:\\github\\reactjs\\storx-farmer\\src\\reportWebVitals.js":"3","D:\\github\\reactjs\\storx-farmer\\src\\redux\\store.js":"4","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\constant.js":"5","D:\\github\\reactjs\\storx-farmer\\src\\cacheBuster.js":"6","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\responsive.js":"7","D:\\github\\reactjs\\storx-farmer\\src\\components\\Disclaimer.js":"8","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\Dashboard.js":"9","D:\\github\\reactjs\\storx-farmer\\src\\components\\Footer.js":"10","D:\\github\\reactjs\\storx-farmer\\src\\components\\TxHistory\\TxHistory.js":"11","D:\\github\\reactjs\\storx-farmer\\src\\components\\HOC\\RequireWallet.js":"12","D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\Staking.js":"13","D:\\github\\reactjs\\storx-farmer\\src\\components\\Header.js":"14","D:\\github\\reactjs\\storx-farmer\\src\\middleware\\networkValidator.js":"15","D:\\github\\reactjs\\storx-farmer\\src\\middleware\\getWalletDetails.js":"16","D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\index.js":"17","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\miscellaneous.js":"18","D:\\github\\reactjs\\storx-farmer\\src\\components\\TxHistory\\Presentation.js":"19","D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\StakingForm.js":"20","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\theme.js":"21","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\decimal.js":"22","D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\Presentational.js":"23","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\account.js":"24","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\BalanceModal.js":"25","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\Presentational.js":"26","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\common.js":"27","D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\walletConnect.js":"28","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\index.js":"29","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\xinpay.js":"30","D:\\github\\reactjs\\storx-farmer\\src\\actions\\types.js":"31","D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\WalletBalance.js":"32","D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\Theme.js":"33","D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\Wallet.js":"34","D:\\github\\reactjs\\storx-farmer\\src\\actions\\index.js":"35","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\Timer.js":"36","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\crypto.js":"37","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\dcentBridge.js":"38","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\dcentInAppBrowser.js":"39","D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\PrivateKey.js":"40","D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\Keystore.js":"41","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\WorldMap.js":"42","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\GeneralModal.js":"43","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\NodeGuidelines.js":"44","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\OurFaqs.js":"45"},{"size":786,"mtime":1731655176622,"results":"46","hashOfConfig":"47"},{"size":2463,"mtime":1732618033114,"results":"48","hashOfConfig":"47"},{"size":375,"mtime":1731655176624,"results":"49","hashOfConfig":"47"},{"size":603,"mtime":1731655176624,"results":"50","hashOfConfig":"47"},{"size":7520,"mtime":1731655176621,"results":"51","hashOfConfig":"47"},{"size":2268,"mtime":1731655176612,"results":"52","hashOfConfig":"47"},{"size":1664,"mtime":1731655176621,"results":"53","hashOfConfig":"47"},{"size":1456,"mtime":1731655176614,"results":"54","hashOfConfig":"47"},{"size":2374,"mtime":1731655176612,"results":"55","hashOfConfig":"47"},{"size":3820,"mtime":1733219790313,"results":"56","hashOfConfig":"47"},{"size":2017,"mtime":1731655176616,"results":"57","hashOfConfig":"47"},{"size":1432,"mtime":1731655176615,"results":"58","hashOfConfig":"47"},{"size":5521,"mtime":1733117274629,"results":"59","hashOfConfig":"47"},{"size":13149,"mtime":1733221079622,"results":"60","hashOfConfig":"47"},{"size":949,"mtime":1731655176623,"results":"61","hashOfConfig":"47"},{"size":1602,"mtime":1731655176622,"results":"62","hashOfConfig":"47"},{"size":223,"mtime":1731655176624,"results":"63","hashOfConfig":"47"},{"size":1879,"mtime":1731655176621,"results":"64","hashOfConfig":"47"},{"size":6175,"mtime":1731655176616,"results":"65","hashOfConfig":"47"},{"size":6615,"mtime":1733210254380,"results":"66","hashOfConfig":"47"},{"size":828,"mtime":1731655176622,"results":"67","hashOfConfig":"47"},{"size":892,"mtime":1731655176621,"results":"68","hashOfConfig":"47"},{"size":15638,"mtime":1733226386405,"results":"69","hashOfConfig":"47"},{"size":3533,"mtime":1731655176625,"results":"70","hashOfConfig":"47"},{"size":2934,"mtime":1731655176617,"results":"71","hashOfConfig":"47"},{"size":26712,"mtime":1733226502365,"results":"72","hashOfConfig":"47"},{"size":521,"mtime":1731655176619,"results":"73","hashOfConfig":"47"},{"size":7635,"mtime":1733227606079,"results":"74","hashOfConfig":"47"},{"size":4260,"mtime":1731655176625,"results":"75","hashOfConfig":"47"},{"size":11023,"mtime":1731655176626,"results":"76","hashOfConfig":"47"},{"size":579,"mtime":1731655176569,"results":"77","hashOfConfig":"47"},{"size":396,"mtime":1731655176623,"results":"78","hashOfConfig":"47"},{"size":540,"mtime":1731655176623,"results":"79","hashOfConfig":"47"},{"size":1359,"mtime":1731655176623,"results":"80","hashOfConfig":"47"},{"size":1273,"mtime":1731655176569,"results":"81","hashOfConfig":"47"},{"size":1401,"mtime":1731655176619,"results":"82","hashOfConfig":"47"},{"size":4059,"mtime":1731655176621,"results":"83","hashOfConfig":"47"},{"size":795,"mtime":1731655176625,"results":"84","hashOfConfig":"47"},{"size":4334,"mtime":1731655176625,"results":"85","hashOfConfig":"47"},{"size":2950,"mtime":1731655176620,"results":"86","hashOfConfig":"47"},{"size":2909,"mtime":1731655176620,"results":"87","hashOfConfig":"47"},{"size":3065,"mtime":1731655176619,"results":"88","hashOfConfig":"47"},{"size":1614,"mtime":1731655176617,"results":"89","hashOfConfig":"47"},{"size":4749,"mtime":1732687013244,"results":"90","hashOfConfig":"47"},{"size":73017,"mtime":1732799990484,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"hgcxpw",{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":5,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":5,"source":"196","usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":8,"source":"199","usedDeprecatedRules":"94"},"D:\\github\\reactjs\\storx-farmer\\src\\index.js",[],["200","201"],"D:\\github\\reactjs\\storx-farmer\\src\\App.js",["202"],"import React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\n/**\r\n *\r\n * @dev import components\r\n *\r\n */\r\n\r\nimport CacheBuster from \"./cacheBuster\";\r\nimport Header from \"./components/Header\";\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\nimport Footer from \"./components/Footer\";\r\nimport Staking from \"./components/Staking/Staking\";\r\nimport Disclaimer from \"./components/Disclaimer\";\r\nimport TxHistory from \"./components/TxHistory/TxHistory\";\r\nimport NodeGuidelines from \"./components/Dashboard/NodeGuidelines\";\r\nimport OurFaqs from \"./components/Dashboard/OurFaqs\";\r\n\r\n/**\r\n *\r\n * @dev import HOC\r\n *\r\n */\r\n\r\nimport RequireWallet from \"./components/HOC/RequireWallet\";\r\n\r\n/**\r\n *\r\n * @dev import CSS\r\n *\r\n */\r\n\r\nimport \"./assets/scss/main.scss\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport packageJson from \"../package.json\";\r\nimport { PROJECT_NAME } from \"./helpers/constant\";\r\n\r\nimport { OnScroll, InitScrollToTop } from \"./helpers/responsive\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst ComposedStaking = RequireWallet()(Staking);\r\nconst ComposedHistory = RequireWallet()(TxHistory);\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", OnScroll);\r\n    InitScrollToTop();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", OnScroll);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <ToastContainer />\r\n      <CacheBuster>\r\n        {({ loading, isLatestVersion, refreshCacheAndReload }) => {\r\n          // console.log(\"[*] cache policy\", loading, isLatestVersion);\r\n          if (loading) return null;\r\n          console.log(`${PROJECT_NAME} UI Version:`, packageJson.version);\r\n          if (!loading && !isLatestVersion) {\r\n            // You can decide how and when you want to force reload\r\n            refreshCacheAndReload();\r\n          }\r\n\r\n          return null;\r\n        }}\r\n      </CacheBuster>\r\n\r\n      <Header />\r\n\r\n      <Route exact path={\"/tx-history\"} component={ComposedHistory} />\r\n      <Route exact path={\"/staking\"} component={ComposedStaking} />\r\n      <Route exact path={\"/disclaimer\"} component={Disclaimer} />\r\n      <Route exact path={\"/node-guidelines\"} component={NodeGuidelines} />\r\n      <Route exact path={\"/faqs\"} component={OurFaqs} />\r\n      <Route exact path={\"/\"} component={Dashboard} />\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\reportWebVitals.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\redux\\store.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\helpers\\constant.js",["203","204","205","206"],"import _ from \"lodash\";\r\nimport axios from \"axios\";\r\n\r\nimport StorX from \"../abi/StorX.json\";\r\nimport ReputationFeed from \"../abi/ReputationFeed.json\";\r\nimport Staking from \"../abi/Staking.json\";\r\n\r\nexport const PROJECT_NAME = \"StorX Staking\";\r\n\r\nexport const LOADERS = {\r\n  Xinpay: \"xinpay\",\r\n  Keystore: \"keystore\",\r\n  Privatekey: \"privatekey\",\r\n  MetaMask: \"metamask\",\r\n  DcentInApp: \"dcent-inapp\",\r\n  DcentBridge: \"dcent-bridge\",\r\n};\r\n\r\nexport const GetDefaultLoader = () =>\r\n  localStorage.getItem(\"default-loader\") || null;\r\nexport const GetDefaultPath = () =>\r\n  localStorage.getItem(\"default-path\") || null;\r\nexport const SetDefaultLoader = (loader) =>\r\n  localStorage.setItem(\"deafult-loader\", loader);\r\nexport const SetDefaultPath = (path) =>\r\n  localStorage.setItem(\"deafult-path\", path);\r\n\r\nexport const SubPath = \"/\";\r\n\r\nexport const RemoveExpo = (x) => {\r\n  var data = String(x).split(/[eE]/);\r\n  if (data.length === 1) return data[0];\r\n\r\n  var z = \"\",\r\n    sign = x < 0 ? \"-\" : \"\",\r\n    str = data[0].replace(\".\", \"\"),\r\n    mag = Number(data[1]) + 1;\r\n\r\n  if (mag < 0) {\r\n    z = sign + \"0.\";\r\n    while (mag++) z += \"0\";\r\n    return z + str.replace(/^\\-/, \"\");\r\n  }\r\n  mag -= str.length;\r\n  while (mag--) z += \"0\";\r\n  return str + z;\r\n};\r\n\r\nexport const CONTRACT_ADDRESS = {\r\n  storx: \"xdc5d5f074837f5d4618b3916ba74de1bf9662a3fed\",\r\n  reputation: \"xdc5db64839828174d2d29b419e5581c16c67d62046\",\r\n  staking: \"xdc02fe7b136f5dbff8d00546cb5af45afd1e1d350c\",\r\n};\r\n\r\nexport const CONTRACT_ABI = {\r\n  storx: StorX,\r\n  reputation: ReputationFeed,\r\n  staking: Staking,\r\n};\r\n\r\n/**\r\n * @constant VALID_CHAINS  correct chain id, in decimal\r\n */\r\n// export const VALID_CHAINS = [50, 51];\r\nexport const VALID_CHAINS = [50];\r\n\r\nexport const NETWORK_NAME = {\r\n  50: \"XinFin\",\r\n  51: \"Apothem\",\r\n};\r\n\r\nexport const CHAIN_DATA = {\r\n  50: \"https://explorer.xinfin.network\",\r\n  51: \"https://explorer.apothem.network\",\r\n};\r\n\r\nexport const HTTP_PROVIDER = {\r\n  50: \"https://rpc.xinfin.network\",\r\n  51: \"https://rpc.apothem.network\",\r\n};\r\n\r\nexport const BUILD_TX_LINK = (explorer, hash) => {\r\n  let retLink = `${explorer}`;\r\n\r\n  if (!retLink.endsWith(\"/\")) retLink += \"/\";\r\n  retLink += `tx/${hash}`;\r\n  return retLink;\r\n};\r\n\r\nexport const ADDR_LINK = (explorer, addr) => {\r\n  let retLink = `${explorer}`;\r\n\r\n  if (!retLink.endsWith(\"/\")) retLink += \"/\";\r\n  retLink += `addr/${addr}`;\r\n  return retLink;\r\n};\r\n\r\nexport const BUILD_BLOCK_LINK = (explorer, hash) => {\r\n  let retLink = `${explorer}`;\r\n\r\n  if (!retLink.endsWith(\"/\")) retLink += \"/\";\r\n  retLink += `block/${hash}`;\r\n  return retLink;\r\n};\r\n\r\nexport const DEFAULT_CHAIN_ID = 50;\r\nexport const DEFAULT_PROVIDER = HTTP_PROVIDER[VALID_CHAINS[0]];\r\n\r\nexport const REPUTATION_FEED_API =\r\n  process.env.REACT_APP_REPUTATION_API || \"http://localhost:3000\";\r\n\r\nexport const AxiosInstance = axios.create({\r\n  baseURL: REPUTATION_FEED_API,\r\n});\r\n\r\nexport const WS_PROVIDER = {};\r\n\r\nexport const ObjToArr = (obj) => Object.keys(obj).map((key) => obj[key]);\r\n\r\nexport const FilterStructResp = (obj) =>\r\n  Object.keys(obj)\r\n    .filter((e, i) => {\r\n      if (i < Object.keys(obj).length / 2) return false;\r\n      return true;\r\n    })\r\n    .reduce((acc, key) => {\r\n      acc[key] = obj[key];\r\n      return acc;\r\n    }, {});\r\n\r\nexport const IsHex = (n) => {\r\n  const re = /[0-9A-Fa-f]{6}/g;\r\n\r\n  if (re.test(n)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const GetTimerData = (seconds) => {\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor(((seconds % 86400) % 3600) / 60);\r\n  const sec = Math.floor(((seconds % 86400) % 3600) % 60);\r\n  return { days, hours, minutes, seconds: sec };\r\n};\r\n\r\nexport const FormatSeconds = (seconds) => {\r\n  const { days, hours, minutes, seconds: sec } = GetTimerData(seconds);\r\n  return (\r\n    <span className=\"timer\">\r\n      <span className=\"days\">{days}</span>:\r\n      <span className=\"hours\">{hours}</span>:\r\n      <span className=\"minutes\">{minutes}</span>::\r\n      <span className=\"seconds\">{sec}</span>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const FormatSecondsTwo = (seconds) => {\r\n  const { days, hours, minutes, seconds: sec } = GetTimerData(seconds);\r\n  return (\r\n    <span className=\"timer\">\r\n      <span className=\"days\">D:&nbsp;{days}</span>&nbsp;&nbsp;\r\n      <span className=\"hours\">{ToDoubleDigit(hours)}</span>:\r\n      <span className=\"minutes\">{ToDoubleDigit(minutes)}</span>:\r\n      <span className=\"seconds\">{ToDoubleDigit(sec)}</span>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const ToDoubleDigit = (x) => {\r\n  x = `${x}`;\r\n  if (x.length === 1) return `0${x}`;\r\n  return x;\r\n};\r\n\r\nexport const AddMultiplier = (amount) => {\r\n  const multiplier = Math.pow(10, 18);\r\n\r\n  return RemoveExpo(parseFloat(amount) * multiplier);\r\n};\r\n\r\nexport const RemoveMultiplier = (amount) => {\r\n  const multiplier = Math.pow(10, 18);\r\n\r\n  return parseFloat(amount) / multiplier;\r\n};\r\n\r\nexport const TIMER_FORMAT = \"DD:HH:MM::SS\";\r\n\r\nexport const IsJson = (abi) => {\r\n  try {\r\n    JSON.parse(abi);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const Random = (min, max) => {\r\n  return min + Math.random() * (max - min);\r\n};\r\n\r\nexport const RandomInt = (min, max) => {\r\n  return Math.round(min + Math.random() * (max - min));\r\n};\r\n\r\nexport const IsJsonRpcError = (err) => {\r\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\r\n};\r\n\r\nexport const EXPLORER = CHAIN_DATA[DEFAULT_CHAIN_ID];\r\n\r\nexport const DateStringFormat = (date) => {\r\n  date = new Date(date);\r\n  if (_.isDate(date))\r\n    return `${date.getDate()}-${\r\n      date.getMonth() + 1\r\n    }-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`;\r\n  return date;\r\n};\r\n\r\nexport const DECIMALS = {\r\n  SRX: 2,\r\n  XDC: 2,\r\n  native: 2,\r\n  tokens: 2,\r\n};\r\n\r\nexport const COIN_NAME = {\r\n  native: \"XDC\",\r\n  tokens: \"SRX\",\r\n};\r\n\r\nexport const MinOf = (x, y) => {\r\n  return parseFloat(x) < parseFloat(y) ? parseFloat(x) : parseFloat(y);\r\n};\r\n\r\nexport const MaxOf = (x, y) => {\r\n  return parseFloat(x) < parseFloat(y) ? parseFloat(y) : parseFloat(x);\r\n};\r\n\r\nexport const Paginate = ({ data, from, limit }) => {\r\n  return data.slice(from, from + MinOf(data.length, limit));\r\n};\r\n\r\nexport const PaginateNav = (active, total) => {\r\n  const min = 0;\r\n  const max = total;\r\n\r\n  let start = MaxOf(active - 1, 0);\r\n  let end = MaxOf(MinOf(total - 1, active + 1), 0);\r\n\r\n  if (start === end && end === active) return [active];\r\n\r\n  if (start === active) {\r\n    if (start === active && active === end) return [active];\r\n    if (end + 1 < total) {\r\n      return [active, end, end + 1];\r\n    } else {\r\n      return [active, end];\r\n    }\r\n  }\r\n\r\n  if (end === active)\r\n    if (start > min) {\r\n      return [start - 1, start, active];\r\n    } else {\r\n      return [start, active];\r\n    }\r\n\r\n  return [start, active, end];\r\n};\r\n\r\nObject.defineProperty(Object.prototype, \"partialMatch\", {\r\n  value: function (fields) {\r\n    for (let key of Object.keys(fields)) {\r\n      if (Object.keys(this).includes(key)) {\r\n        if (this[key] === fields[key]) continue;\r\n        return false;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n});\r\n\r\nObject.defineProperty(Array.prototype, \"includesPartial\", {\r\n  value: function (fields) {\r\n    for (let i = 0; i < this.length; i++) {\r\n      const obj = this[i];\r\n      // console.log(\"objobj\", obj);\r\n      if (obj.partialMatch(fields)) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  },\r\n});\r\n","D:\\github\\reactjs\\storx-farmer\\src\\cacheBuster.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\helpers\\responsive.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\Disclaimer.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\Dashboard.js",["207","208"],"import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport { InitStackableTable } from \"../../helpers/responsive\";\r\nimport { AxiosInstance } from \"../../helpers/constant\";\r\n\r\nimport DashboardPresentation from \"./Presentational\";\r\nimport { GetFavorites, ToggleFavorite } from \"../../helpers/miscellaneous\";\r\nimport { fromXdcAddress, toXdcAddress } from \"../../wallets/xinpay\";\r\n\r\nconst intialState = {\r\n  data: null,\r\n  node_data: null,\r\n  favorite: GetFavorites(),\r\n  tab: 0,\r\n};\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = intialState;\r\n\r\n    this.toggleFavorite = this.toggleFavorite.bind(this);\r\n    this.setTab = this.setTab.bind(this);\r\n    this.filterData = this.filterData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    AxiosInstance.get(\"/get-contract-data\")\r\n      .then((resp) => {\r\n        const allStakeholders = resp.data.data.stakeHolders;\r\n        this.setState(\r\n          { data: { ...resp.data.data, allStakeholders } },\r\n          InitStackableTable\r\n        );\r\n      })\r\n      .catch(console.error);\r\n\r\n    AxiosInstance.get(\"/get-node-coordinates\")\r\n      .then((resp) => {\r\n        this.setState({ node_data: resp.data.data });\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    InitStackableTable();\r\n  }\r\n\r\n  toggleFavorite(addr) {\r\n    const newFav = ToggleFavorite(addr);\r\n    this.setState({ favorite: newFav });\r\n  }\r\n\r\n  setTab(tab) {\r\n    this.setState({ tab });\r\n  }\r\n\r\n  filterData(filter) {\r\n    if (!this.state.data) return;\r\n    const data =\r\n      this.state.data.allStakeholders || this.state.data.stakeHolders;\r\n    const filtered = Object.keys(data).reduce((acc, curr) => {\r\n      if (toXdcAddress(curr).toLowerCase().includes(toXdcAddress(filter).toLowerCase())) {\r\n        acc[curr] = data[curr];\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    this.setState({\r\n      data: {\r\n        ...this.state.data,\r\n        stakeHolders: filtered,\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DashboardPresentation\r\n        data={this.state.data}\r\n        node_data={this.state.node_data}\r\n        favorite={this.state.favorite}\r\n        toggleFavorite={this.toggleFavorite}\r\n        filterData={this.filterData}\r\n        setTab={this.setTab}\r\n        tab={this.state.tab}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Footer.js",["209","210","211","212","213","214","215","216","217","218","219","220"],"D:\\github\\reactjs\\storx-farmer\\src\\components\\TxHistory\\TxHistory.js",["221","222","223","224","225","226","227","228","229","230","231"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport _ from \"lodash\";\r\nimport { isAddress, fromWei } from \"xdc3-utils\";\r\n\r\nimport {\r\n  AxiosInstance,\r\n  BUILD_BLOCK_LINK,\r\n  BUILD_TX_LINK,\r\n  EXPLORER,\r\n  RemoveExpo,\r\n} from \"../../helpers/constant\";\r\nimport { toXdcAddress } from \"../../wallets/xinpay\";\r\n\r\nimport { InitStackableTable } from \"../../helpers/responsive\";\r\n\r\nimport Presentation from \"./Presentation\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\n\r\n\r\n\r\nclass TxHistory extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      events: null,\r\n      loading: false,\r\n    };\r\n\r\n    this.initialized = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getEvents();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // console.log(\r\n    //   \"account change\",\r\n    //   !_.isEqual(prevProps.wallet, this.props.wallet),\r\n    //   prevProps.wallet,\r\n    //   this.props.wallet\r\n    // );\r\n    if (!_.isEqual(prevProps.wallet, this.props.wallet)) {\r\n      // fetch events\r\n      this.getEvents();\r\n    }\r\n  }\r\n\r\n  getEvents() {\r\n    if (!this.props.wallet.address) return;\r\n    this.setState({ loading: true });\r\n    AxiosInstance.get(`/get-user-events/${this.props.wallet.address}`)\r\n      .then((resp) => {\r\n        const data = resp.data.data;\r\n        this.setState({ events: data, loading: false }, () => {\r\n          if (data.length > 0) {\r\n            if (this.initialized !== true) {\r\n              InitStackableTable();\r\n              this.initialized = true;\r\n            }\r\n          } else {\r\n            this.initialized = false;\r\n          }\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        this.setState({ loading: false });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return <Presentation events={this.state.events} />;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ wallet }) {\r\n  return { wallet };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TxHistory);\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\HOC\\RequireWallet.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\Staking.js",["232","233","234","235","236"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\nimport { fromWei, toWei } from \"xdc3-utils\";\r\n\r\nimport { SubmitContractTxGeneral } from \"../../wallets\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\nimport { AxiosInstance, CONTRACT_ADDRESS, RemoveExpo } from \"../../helpers/constant\";\r\nimport { InfoHeader, InfoCard } from \"./Presentational\";\r\nimport StakingForm from \"./StakingForm\";\r\n\r\nconst InitialState = {\r\n  stake: null,\r\n  loaded: false,\r\n  approvedAmount: 0,\r\n  stakingData: null,\r\n};\r\n\r\nclass Staking extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = InitialState;\r\n\r\n    this.getStakeDetail = this.getStakeDetail.bind(this);\r\n    this.claimEarned = this.claimEarned.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getStakeDetail();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.wallet.address !== this.props.wallet.address) this.getStakeDetail();\r\n  }\r\n\r\n  claimEarned() {\r\n    if (!this.props.wallet.connected) return;\r\n    SubmitContractTxGeneral(\"claimEarned\", { type: \"staking\" }, \"nonpayable\", this.props.wallet.address).then(console.log).catch(console.log);\r\n  }\r\n\r\n  async getStakeDetail() {\r\n    if (!this.props.wallet.connected) return LOADER_BOX;\r\n\r\n    const isStaker = await SubmitContractTxGeneral(\"isStaker\", { type: \"reputation\" }, \"view\", this.props.wallet.address);\r\n\r\n    const stackingDetails = await SubmitContractTxGeneral(\"stakes\", { type: \"staking\" }, \"view\", this.props.wallet.address);\r\n    const earned = await SubmitContractTxGeneral(\"earned\", { type: \"staking\" }, \"view\", this.props.wallet.address);\r\n    const stakingData = await AxiosInstance.get(\"/get-contract-data\");\r\n    const nextDripAt =\r\n    stackingDetails.staked && !stackingDetails.unstaked\r\n        ? await SubmitContractTxGeneral(\"nextDripAt\", { type: \"staking\" }, \"view\", this.props.wallet.address)\r\n        : Math.floor(new Date().getTime() / 1000).toString();\r\n    const approvedAmount = await SubmitContractTxGeneral(\"allowance\", { type: \"storx\" }, \"view\", this.props.wallet.address, CONTRACT_ADDRESS.staking);\r\n    const reputation = await SubmitContractTxGeneral(\"reputations\", { type: \"reputation\" }, \"view\", this.props.wallet.address);\r\n\r\n    const { exists, balance, lastRedeemedAt, unstakedTime, staked, totalRedeemed, stakerHolder, stakedAmount, stakedTime, unstaked, ...rst } =\r\n      stackingDetails;\r\n\r\n    this.setState(\r\n      {\r\n        loaded: true,\r\n        stake: {\r\n          exists,\r\n          balance,\r\n          lastRedeemedAt,\r\n          unstakedTime,\r\n          staked,\r\n          totalRedeemed,\r\n          stakerHolder,\r\n          stakedAmount,\r\n          stakedTime,\r\n          earned,\r\n          nextDripAt,\r\n          unstaked,\r\n          ...rst,\r\n        },\r\n        approvedAmount: fromWei(RemoveExpo(approvedAmount)),\r\n        stakingData: stakingData.data.data,\r\n        isStaker,\r\n        reputation,\r\n      },\r\n      () => {\r\n        if (unstaked) {\r\n          SubmitContractTxGeneral(\"canWithdrawStakeIn\", { type: \"staking\" }, \"view\", this.props.wallet.address).then((x) => {\r\n            // console.log(\"canWithdrawStakeIn\", x);\r\n            this.setState({\r\n              stake: {\r\n                ...this.state.stake,\r\n                canWithdrawStakeIn: x,\r\n              },\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const reputation = this.state.isStaker ? this.state.reputation : \"NOT A STAKER\";\r\n\r\n    let stakeValidClass = this.state.isStaker && this.state.reputation >= this.state.stakingData.reputationThreshold ? \"text-success\" : \"text-danger\";\r\n\r\n    const stakeValid = this.state.stakingData\r\n      ? this.state.isStaker\r\n        ? (this.state.reputation >= this.state.stakingData.reputationThreshold).toString().toUpperCase()\r\n        : \"NOT A STAKER\"\r\n      : LOADER_BOX;\r\n\r\n    return (\r\n      <>\r\n        <section className=\"block-overlap sec-staking\">\r\n          <div className=\"container\">\r\n            {/*<div className=\"row\">\r\n              <div className=\"col-sm-12\">\r\n                <div className=\"announcement\">\r\n                  <b>Note</b>: If you're facing issues with your reputation & redeeming rewards please refer the thread{\" \"}\r\n                  <a href=\"https://twitter.com/StorXNetwork/status/1450885741962096641\" target=\"_blank\" className=\"blue\" rel=\"noreferrer\">\r\n                    here\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>*/}\r\n\r\n            <InfoHeader\r\n              stakingData={this.state.stakingData}\r\n              reputation={reputation}\r\n              stakeValid={stakeValid}\r\n              stakeValidClass={stakeValidClass}\r\n              wallet={this.props.wallet.address}\r\n            />\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-12 col-md-6 col-lg-6 mb-3\">\r\n                <InfoCard data={this.state} getStakeDetail={this.getStakeDetail} claimRewards={this.claimEarned} stakeValid={stakeValid} />\r\n              </div>\r\n              <div className=\"col-sm-12 col-md-6 col-lg-6 mb-3\">\r\n                <StakingForm stake={this.state.stake} getStakeDetail={this.getStakeDetail} approvedAmount={this.state.approvedAmount} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ wallet }) {\r\n  return { wallet };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Staking);\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Header.js",["237","238","239","240","241","242","243","244","245","246","247","248"],"D:\\github\\reactjs\\storx-farmer\\src\\middleware\\networkValidator.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\middleware\\getWalletDetails.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\index.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\helpers\\miscellaneous.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\TxHistory\\Presentation.js",["249","250","251","252","253","254"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { fromWei, isAddress } from \"xdc3-utils\";\r\n\r\nimport { toXdcAddress } from \"../../wallets/xinpay\";\r\nimport { FormatNumber, FormatToken } from \"../../helpers/decimal\";\r\nimport {\r\n  ADDR_LINK,\r\n  EXPLORER,\r\n  Paginate,\r\n  PaginateNav,\r\n  RemoveExpo,\r\n  BUILD_BLOCK_LINK,\r\n  BUILD_TX_LINK,\r\n} from \"../../helpers/constant\";\r\nimport { FlexTable } from \"../../helpers/responsive\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\n\r\nfunction formatValue(varName, value) {\r\n  if (isAddress(value))\r\n    return (\r\n      <span className=\"truncate\">\r\n        <a target=\"_blank\" href={ADDR_LINK(EXPLORER, toXdcAddress(value))}>\r\n          {toXdcAddress(value)}\r\n        </a>\r\n      </span>\r\n    );\r\n  if ([\"amount\", \"earnings\", \"principal\"].includes(varName))\r\n    return fromWei(RemoveExpo(value));\r\n}\r\n\r\nfunction renderReturnValues(returnValues) {\r\n  return (\r\n    <>\r\n      {Object.keys(returnValues)\r\n        .filter((x) => isNaN(x))\r\n        .map((v, i) => (\r\n          <div key={i} className=\"row\">\r\n            <div className=\"col-lg-4 col-sm-4 col-xs-4 text-left\">{v}</div>\r\n            <div className=\"col-lg-8 col-sm-8 col-xs-8\">\r\n              {formatValue(v, returnValues[v])}\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction RenderRows(events, from) {\r\n  if (!events)\r\n    return (\r\n      <tr>\r\n        <td className=\"u-text-center\" style={{ maxWidth: \"100%\" }} colSpan={4}>\r\n          LOADING\r\n        </td>\r\n      </tr>\r\n    );\r\n\r\n  const nodes = [];\r\n\r\n  if (events.length === 0) {\r\n    return (\r\n      <tr className=\"hover-grow \">\r\n        <td colSpan={3} className=\"u-text-center\">No Transactions done yet</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  events = Paginate({ data: events, from: from * 10, limit: 10 });\r\n\r\n  for (let i = 0; i < events.length; i++) {\r\n    const event = events[i];\r\n\r\n    nodes.push(\r\n      <tr className=\"hover-grow\">\r\n        <td>\r\n          <span className=\"table-responsive-stack-thead\">BLOCK NUMBER</span>\r\n\r\n          <a target=\"_blank\" href={BUILD_BLOCK_LINK(EXPLORER, event.block)}>\r\n            {event.block}\r\n          </a>\r\n        </td>\r\n        <td>\r\n          <span className=\"table-responsive-stack-thead\">NAME</span>\r\n          {event.name}\r\n        </td>\r\n        <td>\r\n          <span className=\"table-responsive-stack-thead\">LINK</span>\r\n          <a target=\"_blank\" href={BUILD_TX_LINK(EXPLORER, event.tx_hash)}>\r\n            HASH LINK\r\n          </a>\r\n        </td>\r\n        <td>{renderReturnValues(event.data)}</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  return nodes;\r\n}\r\n\r\nfunction RenderPagination({ active, setPage, total }) {\r\n  const prevClass = active === 0 ? \"page-link disabled\" : \"page-link\";\r\n  const nextClass =\r\n    Math.ceil(total / 10) <= active + 1 ? \"page-link disabled\" : \"page-link\";\r\n  const last = Math.ceil(total / 10);\r\n\r\n  const nos = PaginateNav(active, last);\r\n  const liClass = (x) => (x === active ? \"page-link active\" : \"page-link\");\r\n  const liItemClass = (x) => (x === active ? \"page-item active\" : \"page-item\");\r\n\r\n  return (\r\n    <>\r\n      <li className=\"page-item\">\r\n        <div\r\n          className={prevClass}\r\n          onClick={() => setPage(active - 1)}\r\n          aria-label=\"Previous\"\r\n        >\r\n          <span aria-hidden=\"true\">&laquo;</span>\r\n          <span className=\"sr-only\">Previous</span>\r\n        </div>\r\n      </li>\r\n      {nos.map((x) => (\r\n        <li key={`pagonate-li-${x}`} className={liItemClass(x)}>\r\n          <div className={liClass(x)} onClick={() => setPage(x)}>\r\n            {String(x + 1)}\r\n          </div>\r\n        </li>\r\n      ))}\r\n      <li className=\"page-item\">\r\n        <div\r\n          onClick={() => setPage(active + 1)}\r\n          className={nextClass}\r\n          aria-label=\"Next\"\r\n        >\r\n          <span aria-hidden=\"true\">&raquo;</span>\r\n          <span className=\"sr-only\">Next</span>\r\n        </div>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction TxHistoryPresentation({ events }) {\r\n  const [active, setActive] = useState(0);\r\n\r\n  const data = events ? events : null;\r\n\r\n  useEffect(() => {\r\n    FlexTable();\r\n  }, [active]);\r\n\r\n  return (\r\n    <>\r\n      <section className=\"section-sm\" >\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"farmnodes-tabbed-section\">\r\n              <div className=\"col-lg-12\">\r\n                <div className=\"ticker-head mb-2\">\r\n                  <ul\r\n                    className=\"nav nav-tabs ticker-nav form-tabs\"\r\n                    role=\"tablist\"\r\n                  >\r\n                    <li className=\"nav-item mb-3\">\r\n                      <div className=\"nav-link\">TX History</div>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-lg-12\">\r\n                <div className=\"tab-content\">\r\n                  <div\r\n                    role=\"tabpanel\"\r\n                    className=\"tab-pane fade in active show\"\r\n                    id=\"tx-history\"\r\n                  >\r\n                    <table className=\"table table-responsive-stack\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>BLOCK NUMBER</th>\r\n                          <th>NAME</th>\r\n                          <th>LINK</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>{RenderRows(data, active)}</tbody>\r\n                    </table>\r\n\r\n                    <div className=\"pagination-container\">\r\n                      <nav aria-label=\"Page navigation example\">\r\n                        <ul className=\"pagination\">\r\n                          <RenderPagination\r\n                            active={active}\r\n                            total={data?.length}\r\n                            setPage={setActive}\r\n                          />\r\n                        </ul>\r\n                      </nav>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TxHistoryPresentation;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\StakingForm.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\helpers\\theme.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\helpers\\decimal.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\Staking\\Presentational.js",["255"],"D:\\github\\reactjs\\storx-farmer\\src\\wallets\\account.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\BalanceModal.js",["256","257","258","259"],"import React, { useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { fromWei } from \"xdc3-utils\";\r\n\r\nimport XdcLogo from \"../../assets/img/wallets/xdc-logo.png\";\r\nimport SrxLogo from \"../../assets/img/wallets/storx-logo.png\";\r\nimport { DECIMALS, RemoveExpo } from \"../../helpers/constant\";\r\nimport { FormatNumber, FormatToken } from \"../../helpers/decimal\";\r\n\r\nconst BalanceModal = ({ data }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const content = (\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header border-bottom-0\">\r\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n          Wallet Balance\r\n        </h5>\r\n        <button\r\n          type=\"button\"\r\n          className=\"close no-outline\"\r\n          onClick={handleClose}\r\n          aria-label=\"Close\"\r\n        >\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n            <div className=\"wallet-icon-block\">\r\n              <div className=\"wallet-icon\" style={{ float: \"left\" }}>\r\n                <img src={XdcLogo} alt=\"XDC\" />\r\n              </div>\r\n              <div style={{ marginLeft: \"45px\" }}>\r\n                <h5>XDC</h5>\r\n                <p>XinFin Network</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"wallet-icon-block text-right\">\r\n              <h5>{FormatToken(data.xdc.amount)}</h5>\r\n              <p>{FormatToken(data.xdc.total)} $</p>\r\n            </div>\r\n          </li>\r\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n            <div className=\"wallet-icon-block\">\r\n              <div className=\"wallet-icon\" style={{ float: \"left\" }}>\r\n                <img src={SrxLogo} alt=\"SRX\" />\r\n              </div>\r\n              <div style={{ marginLeft: \"45px\" }}>\r\n                <h5>SRX</h5>\r\n                <p>StorX&nbsp;Network</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"wallet-icon-block text-right\">\r\n              <h5>{FormatToken(data.srx.amount)}</h5>\r\n              <p>{FormatToken(data.srx.total)} $</p>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"modal-footer border-top-0 d-flex justify-content-center\">\r\n        <button type=\"button\" className=\"back\" onClick={handleClose}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div onClick={handleShow} className=\"btn nav-link\">\r\n        Balance\r\n      </div>\r\n      <Modal centered={true} show={showModal} onHide={handleClose}>\r\n        {content}\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BalanceModal;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\Presentational.js",["260","261","262","263","264","265","266"],"D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\common.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\walletConnect.js",["267","268","269","270","271","272","273","274","275"],"D:\\github\\reactjs\\storx-farmer\\src\\wallets\\index.js",["276"],"import Xdc3 from \"xdc3\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport * as xinpay from \"./xinpay\";\r\nimport * as account from \"./account\";\r\nimport * as dcentBridge from \"./dcentBridge\";\r\nimport * as dcentInApp from \"./dcentInAppBrowser\";\r\n\r\nimport store from \"../redux/store\";\r\nimport { EXPLORER, LOADERS, DEFAULT_PROVIDER, BUILD_TX_LINK } from \"../helpers/constant\";\r\n\r\nfunction GetFuncFromLoader(loader) {\r\n  switch (loader) {\r\n    case LOADERS.Xinpay:\r\n      return xinpay;\r\n    case LOADERS.Keystore:\r\n      return account;\r\n    case LOADERS.Privatekey:\r\n      return account;\r\n    case LOADERS.DcentInApp:\r\n      return dcentInApp;\r\n    default:\r\n      return xinpay;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @note directly get from default provider\r\n *\r\n */\r\nexport function GetNativeBalance() {\r\n  return new Promise((resolve, reject) => {\r\n    const xdc3 = new Xdc3(new Xdc3.providers.HttpProvider(DEFAULT_PROVIDER));\r\n    const wallet = store.getState();\r\n    const address = wallet.wallet.address;\r\n    xdc3.eth.getBalance(address).then(resolve).catch(reject);\r\n  });\r\n}\r\n\r\nexport function IsLocked(...params) {\r\n  return new Promise((resolve, reject) => {\r\n    const wallet = store.getState();\r\n    GetFuncFromLoader(wallet.wallet.chain_id)\r\n      .IsLocked(...params)\r\n      .then((resp) => {\r\n        resolve(resp);\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"resp\", IsJsonRpcError(e));\r\n        // console.log(\"resp\", e);\r\n        reject(e);\r\n      });\r\n  });\r\n}\r\n\r\nexport function SubmitContractTxGeneral(...params) {\r\n  return new Promise((resolve, reject) => {\r\n    const wallet = store.getState();\r\n    let toastId;\r\n    if (params[2] !== \"view\")\r\n      toastId = toast(\"Processing TX ...\", {\r\n        position: \"bottom-right\",\r\n        type: \"processing-tx\",\r\n        autoClose: false,\r\n        hideProgressBar: false,\r\n        closeOnClick: false,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        progress: undefined,\r\n        closeButton: false,\r\n      });\r\n\r\n    GetFuncFromLoader(wallet.wallet.loader)\r\n      .SubmitContractTxGeneral(...params)\r\n      .then((resp) => {\r\n        if (resp.transactionHash) {\r\n          const { transactionHash } = resp;\r\n          toast(\r\n            <div>\r\n              Sucsess&nbsp;\r\n              <a\r\n                href={BUILD_TX_LINK(EXPLORER, transactionHash)}\r\n                // href={`${EXPLORER}/tx/${transactionHash}`}\r\n                rel=\"noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                HASH\r\n              </a>\r\n            </div>,\r\n            {\r\n              position: \"bottom-right\",\r\n              type: \"success-tx\",\r\n              autoClose: false,\r\n              hideProgressBar: false,\r\n              closeButton: true,\r\n              closeOnClick: false,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n            }\r\n          );\r\n        }\r\n\r\n        resolve(resp);\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"resp\", IsJsonRpcError(e));\r\n        console.log(\"resp\", e, e.message);\r\n        const message = e.message || <>Failing Transaction</>;\r\n        toast(\r\n          <div>\r\n            <b>Error</b>:{message}\r\n          </div>,\r\n          {\r\n            position: \"bottom-right\",\r\n            type: \"error\",\r\n            autoClose: false,\r\n            hideProgressBar: false,\r\n            closeButton: true,\r\n            closeOnClick: false,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          }\r\n        );\r\n        reject(e);\r\n      })\r\n      .finally(() => {\r\n        if (toastId) toast.dismiss(toastId);\r\n      });\r\n  });\r\n}\r\n\r\nexport async function GetFromAddress(hash) {\r\n  const wallet = store.getState();\r\n  return await GetFuncFromLoader(wallet.wallet.chain_id).GetFromAddress(hash);\r\n}\r\n\r\nexport const IsJsonRpcError = (err) => {\r\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\r\n};\r\n\r\nexport const GetJsonRpcError = (err) => {\r\n  return JSON.parse(err.message.split(\"\\n\").slice(1).join(\"\").trim());\r\n};\r\n\r\nexport const IsAddressEqual = (a, b) => {\r\n  a = xinpay.fromXdcAddress(a).toLowerCase();\r\n  b = xinpay.fromXdcAddress(b).toLowerCase();\r\n  return a === b;\r\n};\r\n","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\xinpay.js",["277","278","279"],"import Xdc3, { utils } from \"xdc3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport _ from \"lodash\";\r\n\r\nimport { GetRevertReason } from \"../helpers/crypto\";\r\nimport {\r\n  CONTRACT_ABI,\r\n  CONTRACT_ADDRESS,\r\n  HTTP_PROVIDER,\r\n  LOADERS,\r\n} from \"../helpers/constant\";\r\n\r\nimport * as actions from \"../actions\";\r\nimport store from \"../redux/store\";\r\nimport { toast } from \"react-toastify\";\r\nimport Web3 from \"web3\";\r\n\r\nlet addresses, xdc3, addressChangeIntervalRef;\r\n\r\nexport function IsXdc3Supported() {\r\n  return Boolean(window.ethereum);\r\n}\r\n\r\nexport async function GetProvider() {\r\n  const provider = await detectEthereumProvider();\r\n  return provider;\r\n}\r\n\r\nexport const MainnetProvider = () => {\r\n  return new Xdc3.providers.HttpProvider(HTTP_PROVIDER[50]);\r\n};\r\n\r\nexport const ApothemProvider = () => {\r\n  return new Xdc3.providers.HttpProvider(HTTP_PROVIDER[50]);\r\n};\r\n\r\nexport async function GetChainId() {\r\n  let xdc3 = new Xdc3(await GetProvider());\r\n  return await xdc3.eth.net.getId();\r\n}\r\n\r\nexport async function initXdc3() {\r\n  try {\r\n    const isLocked = await IsLocked();\r\n    if (isLocked === true) {\r\n      toast(\"Please unlock XDCPay wallet to continue\", { autoClose: 2000 });\r\n      return store.dispatch(actions.WalletDisconnected());\r\n    }\r\n    const isXdc3Supported = IsXdc3Supported();\r\n    if (!isXdc3Supported) {\r\n      toast(\r\n        <div>\r\n          XinPay not available in the browser. Please refer <a href=\"/\">here</a>\r\n        </div>,\r\n        {\r\n          autoClose: 2000,\r\n        }\r\n      );\r\n\r\n      return store.dispatch(actions.WalletDisconnected());\r\n    }\r\n    if ((await GetCurrentProvider()) !== \"xinpay\") {\r\n      toast(\r\n        <div>\r\n          XinPay not available in the browser. Please refer <a href=\"/\">here</a>\r\n        </div>,\r\n        {\r\n          autoClose: 2000,\r\n        }\r\n      );\r\n      return store.dispatch(actions.WalletDisconnected());\r\n    }\r\n    // const isConnected = await window.ethereum.isConnected();\r\n    await window.ethereum.enable();\r\n    _initListerner();\r\n    const provider = await GetProvider();\r\n    xdc3 = new Xdc3(provider);\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    addresses = accounts;\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    return store.dispatch(\r\n      actions.WalletConnected({\r\n        address: accounts[0],\r\n        chain_id,\r\n        loader: LOADERS.Xinpay,\r\n      })\r\n    );\r\n  } catch (e) {\r\n    // console.log(e);\r\n  }\r\n}\r\n\r\nexport function _initListerner() {\r\n  window.ethereum.removeAllListeners();\r\n\r\n  if (addressChangeIntervalRef) clearInterval(addressChangeIntervalRef);\r\n\r\n  addressChangeIntervalRef = setInterval(async () => {\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    if (_.isEqual(accounts, addresses)) return;\r\n    // console.log(\"accounts\", accounts);\r\n    addresses = accounts;\r\n    store.dispatch(actions.AccountChanged(accounts[0]));\r\n  }, 1000);\r\n\r\n  window.ethereum.on(\"accountsChanged\", async (data) => {\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    // console.log(\"accounts\", accounts);\r\n    addresses = accounts;\r\n    store.dispatch(actions.AccountChanged(accounts[0]));\r\n  });\r\n\r\n  window.ethereum.on(\"chainChanged\", async (data) => {\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    store.dispatch(actions.NetworkChanged(chain_id));\r\n  });\r\n\r\n  window.ethereum.on(\"connect\", async (data) => {\r\n    xdc3 = new Xdc3(await GetProvider());\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    addresses = accounts;\r\n    return store.dispatch(\r\n      actions.WalletConnected({\r\n        address: accounts[0],\r\n        chain_id,\r\n        loader: LOADERS.Xinpay,\r\n      })\r\n    );\r\n  });\r\n\r\n  window.ethereum.on(\"disconnect\", (data) => {\r\n    // console.log(\"disconnect\", data);\r\n    return store.dispatch(actions.WalletDisconnected());\r\n  });\r\n\r\n  window.ethereum.on(\"message\", (data) => {\r\n    // console.log(\"message\", data);\r\n  });\r\n}\r\n\r\nexport async function GetCurrentProvider() {\r\n  if (IsXdc3Supported() !== true) return null;\r\n\r\n  if (window.web3.currentProvider.isMetaMask) {\r\n    const chainId = await GetChainId();\r\n    if ([50, 51].includes(chainId)) return \"xinpay\";\r\n    return \"metamask\";\r\n  }\r\n\r\n  if (window.web3.currentProvider.isTrust) return \"trust\";\r\n\r\n  if (window.web3.currentProvider.isStatus) return \"status\";\r\n\r\n  if (typeof window.SOFA !== \"undefined\") return \"coinbase\";\r\n\r\n  if (typeof window.__CIPHER__ !== \"undefined\") return \"cipher\";\r\n\r\n  if (window.web3.currentProvider.constructor.name === \"EthereumProvider\")\r\n    return \"mist\";\r\n\r\n  if (window.web3.currentProvider.constructor.name === \"Xdc3FrameProvider\")\r\n    return \"parity\";\r\n\r\n  if (\r\n    window.web3.currentProvider.host &&\r\n    window.web3.currentProvider.host.indexOf(\"infura\") !== -1\r\n  )\r\n    return \"infura\";\r\n\r\n  if (\r\n    window.web3.currentProvider.host &&\r\n    window.web3.currentProvider.host.indexOf(\"localhost\") !== -1\r\n  )\r\n    return \"localhost\";\r\n\r\n  return \"unknown\";\r\n}\r\n\r\nexport const GetNativeBalance = (address) => {\r\n  const xdc3 = new Xdc3(window.web3.currentProvider);\r\n  return xdc3.eth.getBalance(address);\r\n};\r\n\r\nexport async function SubmitContractTxGeneral(\r\n  method,\r\n  { type, address },\r\n  stateMutability,\r\n  ...params\r\n) {\r\n  return new Promise((resolve, reject) => {\r\n    GetProvider()\r\n      .then(async (provider) => {\r\n        const xdc3 = new Xdc3(provider);\r\n\r\n        const { abi, address: contractAddress } = getContractAddress(type);\r\n\r\n        address = contractAddress;\r\n\r\n        // console.log(\"typetype\", type, address, arguments);\r\n\r\n        const contract = new xdc3.eth.Contract(abi, address);\r\n\r\n        if (stateMutability === \"view\") {\r\n          contract.methods[method](...params)\r\n            .call()\r\n            .then((resp) => {\r\n              resolve(resp);\r\n            })\r\n            .catch(reject);\r\n        } else if (stateMutability === \"payable\") {\r\n          const [value] = params.splice(params.length - 1, 1);\r\n\r\n          const data = contract.methods[method](...params).encodeABI();\r\n\r\n          const tx = {\r\n            from: addresses[0],\r\n            to: address,\r\n            data,\r\n            value,\r\n          };\r\n\r\n          try {\r\n            const gasLimit = \"40000000\";\r\n            // await xdc3.eth.estimateGas(tx);\r\n          } catch (e) {\r\n            const reason = await GetRevertReason(tx);\r\n            reject({ message: reason });\r\n            return;\r\n          }\r\n\r\n          xdc3.eth.sendTransaction(tx, (err, hash) => {\r\n            if (err) reject(err);\r\n            let interval = setInterval(async () => {\r\n              try {\r\n                const receipt = await xdc3.eth.getTransactionReceipt(hash);\r\n                // console.log(\"receipt\", receipt);\r\n                if (receipt !== null) {\r\n                  if (receipt.status) {\r\n                    clearInterval(interval);\r\n                    resolve(receipt);\r\n                  } else {\r\n                    clearInterval(interval);\r\n                    reject(receipt);\r\n                  }\r\n                }\r\n              } catch (e) {\r\n                clearInterval(interval);\r\n                reject(e);\r\n              }\r\n            }, 2000);\r\n          });\r\n          // })\r\n          // .catch(reject);\r\n        } else {\r\n          // console.log(\"addresses[0]\", addresses[0], method, params);\r\n\r\n          const data = contract.methods[method](...params).encodeABI();\r\n\r\n          const tx = {\r\n            from: addresses[0],\r\n            to: address,\r\n            data,\r\n          };\r\n\r\n          try {\r\n            const gasLimit = \"40000000\";\r\n            // await xdc3.eth.estimateGas(tx);\r\n          } catch (e) {\r\n            const reason = await GetRevertReason(tx);\r\n            reject({ message: reason });\r\n            return;\r\n          }\r\n\r\n          xdc3.eth.sendTransaction(tx, (err, hash) => {\r\n            if (err) reject(err);\r\n            let interval = setInterval(async () => {\r\n              try {\r\n                const receipt = await xdc3.eth.getTransactionReceipt(hash);\r\n                if (receipt !== null) {\r\n                  if (receipt.status) {\r\n                    clearInterval(interval);\r\n                    resolve(receipt);\r\n                  } else {\r\n                    clearInterval(interval);\r\n                    reject(receipt);\r\n                  }\r\n                }\r\n              } catch (e) {\r\n                clearInterval(interval);\r\n                reject(e);\r\n              }\r\n            }, 2000);\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(arguments, e);\r\n        // console.log(\"resp\", IsJsonRpcError(e));\r\n        // console.log(\"resp\", e);\r\n        reject(e);\r\n      });\r\n  });\r\n\r\n  // } catch (e) {\r\n  //   console.log(\"resp\", IsJsonRpcError(e));\r\n  //   console.log(\"resp\", e);\r\n  //   throw e;\r\n  // }\r\n}\r\n\r\nexport async function SubmitContractTxGeneralNonAuth(\r\n  method,\r\n  { type, address },\r\n  ...params\r\n) {\r\n  return new Promise((resolve, reject) => {\r\n    const xdc3 = new Xdc3(MainnetProvider());\r\n\r\n    const { abi, address: contractAddress } = getContractAddress(type);\r\n\r\n    address = contractAddress;\r\n\r\n    const contract = new xdc3.eth.Contract(abi, address);\r\n\r\n    contract.methods[method](...params)\r\n      .call()\r\n      .then((resp) => {\r\n        resolve(resp);\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport const IsJsonRpcError = (err) => {\r\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\r\n};\r\n\r\nexport const GetPastEvents = async (abi, address, ...opts) => {\r\n  const xdc3 = new Xdc3(await GetProvider());\r\n  const contract = new xdc3.eth.Contract(abi, address);\r\n  const query = {\r\n    fromBlock: 0,\r\n    toBlock: \"latest\",\r\n    ...opts,\r\n  };\r\n  return await contract.getPastEvents(\"allEvents\", { ...query });\r\n};\r\n\r\nexport const GetFromAddress = async (hash) => {\r\n  const xdc3 = new Xdc3(await GetProvider());\r\n  const tx = await xdc3.eth.getTransaction(hash);\r\n  const block = await xdc3.eth.getBlock(tx.blockHash);\r\n  return { from: tx.from, timestamp: block.timestamp };\r\n};\r\n\r\n// export const GetBlock = async (hash) => {\r\n//   const xdc3 = new Xdc3(await GetProvider());\r\n//   return (await xdc3.eth.getBlock(hash)).from;\r\n// };\r\n\r\nexport const GetJsonRpcError = (err) => {\r\n  return JSON.parse(err.message.split(\"\\n\").slice(1).join(\"\").trim());\r\n};\r\n\r\nfunction getContractAddress(type) {\r\n  return {\r\n    address: CONTRACT_ADDRESS[type],\r\n    abi: CONTRACT_ABI[type],\r\n  };\r\n}\r\n\r\nexport function fromXdcAddress(address) {\r\n  return utils.fromXdcAddress(address);\r\n}\r\n\r\nexport function toXdcAddress(address) {\r\n  return utils.toXdcAddress(address).toLowerCase();\r\n}\r\n\r\nexport async function IsLocked() {\r\n  const web3 = new Web3(await GetProvider());\r\n  const allAccounts = await web3.eth.getAccounts();\r\n  /* let xdc3 = new Xdc3(await GetProvider());\r\n  const accounts = await xdc3.eth.getAccounts();\r\n  return _.isEmpty(accounts); */\r\n}\r\n","D:\\github\\reactjs\\storx-farmer\\src\\actions\\types.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\WalletBalance.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\Theme.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\redux\\reducers\\Wallet.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\actions\\index.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\Timer.js",["280","281"],"import React, { useState, useEffect } from \"react\";\r\nimport { FormatSecondsTwo } from \"../../helpers/constant\";\r\n\r\nexport default class Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { startDate = new Date().getTime(), endDate } = props;\r\n    const startTime = new Date(startDate).getTime() / 1000,\r\n      endTime = new Date(endDate).getTime() / 1000;\r\n\r\n    const count = endTime - startTime > 0 ? endTime - startTime : 0;\r\n\r\n    this.state = { count };\r\n\r\n    this.ref = null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.endDate !== this.props.endDate) {\r\n      const { startDate = new Date().getTime(), endDate } = this.props;\r\n      const startTime = new Date(startDate).getTime() / 1000,\r\n        endTime = new Date(endDate).getTime() / 1000;\r\n      const count = endTime - startTime > 0 ? endTime - startTime : 0;\r\n\r\n      this.setState({ count });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ref = setInterval(() => {\r\n      if (this.state.count >= 1) this.setState({ count: this.state.count - 1 });\r\n      else {\r\n        if (this.props.cb) {\r\n          this.props.cb();\r\n        }\r\n        clearInterval(this.ref);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.ref) clearInterval(this.ref);\r\n  }\r\n\r\n  render() {\r\n    const x = FormatSecondsTwo(this.state.count);\r\n\r\n    return <div>{x}</div>;\r\n  }\r\n}\r\n","D:\\github\\reactjs\\storx-farmer\\src\\helpers\\crypto.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\wallets\\dcentBridge.js",["282","283","284","285","286","287","288","289"],"import DcentWebConnector from \"dcent-web-connector\";\r\n\r\nimport { GetRevertReason } from \"../helpers/crypto\";\r\nimport {\r\n  CONTRACT_ABI,\r\n  CONTRACT_ADDRESS,\r\n  HTTP_PROVIDER,\r\n  LOADERS,\r\n} from \"../helpers/constant\";\r\n\r\nimport * as actions from \"../actions\";\r\nimport store from \"../redux/store\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// DcentWebConnector.info()\r\n//   .then((x) => {\r\n//     console.log(\"DcentWebConnector\", x);\r\n//   })\r\n//   .catch((e) => {\r\n//     console.log(\"DcentWebConnector\", e);\r\n//   });\r\n\r\nexport const initListener = () => {\r\n  DcentWebConnector.setConnectionListener(connectionListener);\r\n};\r\n\r\nfunction connectionListener(state) {\r\n  if (state === DcentWebConnector.state.CONNECTED) {\r\n  } else if (state === DcentWebConnector.state.DISCONNECTED) {\r\n  }\r\n}\r\n","D:\\github\\reactjs\\storx-farmer\\src\\wallets\\dcentInAppBrowser.js",["290","291"],"import Xdc3 from \"xdc3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport _ from \"lodash\";\r\n\r\nimport { CONTRACT_ABI, CONTRACT_ADDRESS, LOADERS } from \"../helpers/constant\";\r\n\r\nimport * as actions from \"../actions\";\r\nimport store from \"../redux/store\";\r\nimport { toast } from \"react-toastify\";\r\nimport { toXdcAddress } from \"./xinpay\";\r\n\r\nlet addresses, xdc3;\r\n\r\nexport const DcentSupported = () => {\r\n  return window.ethereum && window.ethereum.isDcentWallet === true;\r\n};\r\n\r\nexport const GetChainId = () => {\r\n  return window.ethereum.request({ method: \"net_version\" });\r\n};\r\n\r\nexport async function GetProvider() {\r\n  const provider = await detectEthereumProvider();\r\n  return provider;\r\n}\r\n\r\nexport const initDcent = async () => {\r\n  try {\r\n    const isSupported = DcentSupported();\r\n    if (!isSupported) {\r\n      toast(\r\n        \"Browser doesn't support DCent wallet, please open in In-App Browser of DCent\"\r\n      );\r\n      return store.dispatch(actions.WalletDisconnected());\r\n    }\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n    xdc3 = new Xdc3(await GetProvider());\r\n    _initListerner();\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    // console.log(\"chain_id\", chain_id, accounts);\r\n    return store.dispatch(\r\n      actions.WalletConnected({\r\n        address: accounts[0],\r\n        chain_id,\r\n        loader: LOADERS.DcentInApp,\r\n      })\r\n    );\r\n  } catch (e) {\r\n    // console.log(e);\r\n  }\r\n};\r\n\r\nexport function _initListerner() {\r\n  window.ethereum.removeAllListeners();\r\n\r\n  window.ethereum.on(\"accountsChanged\", async (data) => {\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    addresses = accounts;\r\n    store.dispatch(actions.AccountChanged(accounts[0]));\r\n  });\r\n\r\n  window.ethereum.on(\"chainChanged\", async (data) => {\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    store.dispatch(actions.NetworkChanged(chain_id));\r\n  });\r\n\r\n  window.ethereum.on(\"connect\", async (data) => {\r\n    xdc3 = new Xdc3(await GetProvider());\r\n    const accounts = await xdc3.eth.getAccounts();\r\n    const chain_id = await xdc3.eth.getChainId();\r\n    addresses = accounts;\r\n    return store.dispatch(\r\n      actions.WalletConnected({\r\n        address: accounts[0],\r\n        chain_id,\r\n        loader: LOADERS.DcentInApp,\r\n      })\r\n    );\r\n  });\r\n\r\n  window.ethereum.on(\"disconnect\", (data) => {\r\n    // console.log(\"disconnect\", data);\r\n    return store.dispatch(actions.WalletDisconnected());\r\n  });\r\n\r\n  window.ethereum.on(\"message\", (data) => {\r\n    // console.log(\"message\", data);\r\n  });\r\n}\r\n\r\nexport async function SubmitContractTxGeneral(\r\n  method,\r\n  { type },\r\n  stateMutability,\r\n  ...params\r\n) {\r\n  try {\r\n    const xdc3 = new Xdc3(await GetProvider());\r\n\r\n    const { address, abi } = getContractAddress(type);\r\n\r\n    const contract = new xdc3.eth.Contract(abi, address);\r\n    const accounts = await xdc3.eth.getAccounts();\r\n\r\n    if (stateMutability === \"view\") {\r\n      const resp = await contract.methods[method](...params).call();\r\n\r\n      return resp;\r\n    } else if (stateMutability === \"payable\") {\r\n      const [value] = params.splice(params.length - 1, 1);\r\n      const gasLimit = '40000000'\r\n      // const gasLimit = await contract.methods[method](...params).estimateGas({\r\n      //   from: accounts[0],\r\n      // });\r\n      const resp = await contract.methods[method](...params).send({\r\n        from: accounts[0],\r\n        gas: gasLimit,\r\n        value: value,\r\n      });\r\n\r\n      return resp;\r\n    } else {\r\n      const gasLimit = '40000000'\r\n      // const gasLimit = await contract.methods[method](...params).estimateGas({\r\n      //   from: accounts[0],\r\n      // });\r\n      // console.log(\"accounts\", accounts, toXdcAddress(accounts[0]));\r\n      const resp = await contract.methods[method](...params).send({\r\n        from: toXdcAddress(accounts[0]),\r\n        gas: gasLimit,\r\n      });\r\n\r\n      return resp;\r\n    }\r\n  } catch (e) {\r\n    console.log(\"resp\", IsJsonRpcError(e));\r\n    console.log(\"resp\", e);\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport const IsJsonRpcError = (err) => {\r\n  return err.message.split(\"\\n\")[0] === \"Internal JSON-RPC error.\";\r\n};\r\n\r\nfunction getContractAddress(type) {\r\n  return {\r\n    address: CONTRACT_ADDRESS[type],\r\n    abi: CONTRACT_ABI[type],\r\n  };\r\n}\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\PrivateKey.js",["292"],"import React, { useState } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport { GetAccountFromPK, VerifyPrivateKey } from \"../../helpers/crypto\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\n\r\nconst PrivateKey = ({ cb, loading, back }) => {\r\n  const [privateKey, setPrivateKey] = useState(\"\");\r\n\r\n  function renderMessage() {\r\n    if (_.isEmpty(privateKey)) return <div className=\"no-key\">&nbsp;</div>;\r\n    const isValid = VerifyPrivateKey(privateKey);\r\n    if (isValid)\r\n      return <div className=\"valid-private-key\">Private Key is valid</div>;\r\n    else if (isValid === false)\r\n      return <div className=\"invalid-private-key\">Invalid Private Key</div>;\r\n  }\r\n\r\n  let btnName = \"Submit\";\r\n\r\n  if (loading) {\r\n    btnName = LOADER_BOX;\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header border-bottom-0\">\r\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n          Connect with Private Key\r\n        </h5>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <form className=\"\" role=\"form\">\r\n          <div className=\"form-group\">\r\n            <label>Enter Private Key</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter Private Key\"\r\n              value={privateKey}\r\n              onChange={(x) => setPrivateKey(x.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"private-key__message\">{renderMessage()}</div>\r\n          <button\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              const account = GetAccountFromPK(privateKey);\r\n              cb(account);\r\n            }}\r\n            disabled={loading}\r\n            className=\"btn btn-rounded btn-info mb-2\"\r\n          >\r\n            {btnName}\r\n          </button>\r\n          <div></div>\r\n        </form>\r\n      </div>\r\n      <div className=\"modal-footer border-top-0 d-flex justify-content-center\">\r\n        <button\r\n          onClick={back}\r\n          type=\"button\"\r\n          className=\"back\"\r\n          data-dismiss=\"modal\"\r\n        >\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    // <Container>\r\n    //   <Row>\r\n    //     <input\r\n    //       className=\"private-key__input\"\r\n    //       value={privateKey}\r\n    //       onChange={(x) => setPrivateKey(x.target.value)}\r\n    //     />\r\n    //   </Row>\r\n\r\n    //   <Row>\r\n    //     <div className=\"private-key__message\">{renderMessage()}</div>\r\n    //   </Row>\r\n\r\n    //   <Row>\r\n    //     <Col>\r\n    //       <Button\r\n    //         className=\"u-float-r\"\r\n    //         onClick={() => {\r\n    //           const account = GetAccountFromPK(privateKey);\r\n    //           cb(account);\r\n    //         }}\r\n    //         disabled={loading}\r\n    //       >\r\n    //         {btnName}\r\n    //       </Button>\r\n    //     </Col>\r\n    //   </Row>\r\n    // </Container>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default PrivateKey;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\wallet-connect\\Keystore.js",["293","294","295","296","297","298"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nimport { GetAccountFromKeystore } from \"../../helpers/crypto\";\r\n\r\nconst ImportFromFilerBodyComponent = ({ cb, defaultPath }) => {\r\n  let fileReader;\r\n\r\n  useEffect(() => {\r\n    if (defaultPath) {\r\n      handleFileChosen(defaultPath);\r\n    }\r\n  });\r\n\r\n  const handleFileRead = () => {\r\n    const content = fileReader.result;\r\n    cb(content);\r\n  };\r\n\r\n  const handleFileChosen = (file) => {\r\n    fileReader = new FileReader();\r\n    fileReader.onloadend = handleFileRead;\r\n    fileReader.readAsText(file);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        className=\"form-file-input form-control\"\r\n        type=\"file\"\r\n        id=\"input-file\"\r\n        accept=\".json\"\r\n        onChange={(e) => handleFileChosen(e.target.files[0])}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Keystore = ({ cb, back }) => {\r\n  const [keystore, setKeystore] = useState(\"\");\r\n  const [pwd, setPwd] = useState(\"\");\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n  // const [loading, setLoading] = useState(false);\r\n\r\n  let btnName = \"Submit\";\r\n\r\n  // if (loading) {\r\n  //   btnName = LOADER_BOX;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header border-bottom-0\">\r\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n          Connect with Key Store\r\n        </h5>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        <form className=\"\" role=\"form\">\r\n          <div className=\"form-group\">\r\n            <ImportFromFilerBodyComponent cb={setKeystore} />\r\n          </div>\r\n          <div className=\"\">{statusMessage}</div>\r\n          <div className=\"form-group\">\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter Password\"\r\n              value={pwd}\r\n              onChange={x => setPwd(x.target.value)}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"btn btn-rounded btn-info mb-2\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              const account = GetAccountFromKeystore(keystore, pwd);\r\n              if (account === null) {\r\n                setStatusMessage(\"Invalid Password / Keystore\");\r\n              } else {\r\n                setStatusMessage(\"Successfully got the account\");\r\n              }\r\n              cb(account);\r\n            }}\r\n          >\r\n            Submit\r\n          </button>\r\n          <div></div>\r\n        </form>\r\n      </div>\r\n      <div className=\"modal-footer border-top-0 d-flex justify-content-center\">\r\n        <button\r\n          onClick={back}\r\n          type=\"button\"\r\n          className=\"back\"\r\n          data-dismiss=\"modal\"\r\n        >\r\n          Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Keystore;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\WorldMap.js",[],"D:\\github\\reactjs\\storx-farmer\\src\\components\\common\\GeneralModal.js",["299"],"import React, { useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nfunction ToggleModal({\r\n  children,\r\n  btnElement = Button,\r\n  btnName = \"View\",\r\n  btnProps = {},\r\n  disableSubmit = true,\r\n  disableClose = true,\r\n  modalClass = \"custom-modal\",\r\n  footer = \"\",\r\n  ...rest\r\n}) {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = () => setShowModal(true);\r\n\r\n  const submitBtn = (\r\n    <Button\r\n      variant=\"primary\"\r\n      onClick={() => {\r\n        if (rest.onSubmit && typeof rest.onSubmit === \"function\") {\r\n          rest.onSubmit();\r\n        }\r\n      }}\r\n    >\r\n      {rest.btnNameSubmit || \"Understood\"}\r\n    </Button>\r\n  );\r\n\r\n  let _footer = footer ? (\r\n    footer\r\n  ) : disableClose === true ? (\r\n    \"\"\r\n  ) : (\r\n    <Button\r\n      variant=\"secondary\"\r\n      onClick={() => {\r\n        handleClose();\r\n        if (rest.onClose && typeof rest.onClose === \"function\") {\r\n          rest.onClose();\r\n        }\r\n      }}\r\n    ></Button>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {React.createElement(\r\n        btnElement,\r\n        { ...btnProps, onClick: handleShow },\r\n        btnName\r\n      )}\r\n\r\n      <Modal\r\n        dialogClassName={modalClass}\r\n        {...rest}\r\n        show={showModal}\r\n        onHide={handleClose}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{rest.modalname}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{children}</Modal.Body>\r\n        <Modal.Footer>{_footer}</Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToggleModal;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\NodeGuidelines.js",["300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { fromWei } from \"xdc3-utils\";\r\n\r\nimport FarmNode from \"../../assets/img/icons/farmnodes.png\";\r\nimport Staking from \"../../assets/img/icons/staking.png\";\r\nimport Rewards from \"../../assets/img/icons/staking-rewards.png\";\r\nimport HostingRewards from \"../../assets/img/icons/hosting-rewards.png\";\r\nimport rocketIcon from \"../../assets/img/icons/banner-rocket-icon.svg\";\r\nimport tickIcon from \"../../assets/img/icons/green-tick-icon.svg\";\r\nimport crossIcon from \"../../assets/img/icons/red-cross-icon.svg\";\r\nimport rightArrowIcon from \"../../assets/img/icons/right-arrow-white-icon.svg\";\r\nimport { fromXdcAddress, toXdcAddress } from \"../../wallets/xinpay\";\r\nimport { FormatNumber, FormatToken } from \"../../helpers/decimal\";\r\nimport {\r\n  ADDR_LINK,\r\n  EXPLORER,\r\n  Paginate,\r\n  PaginateNav,\r\n  RemoveExpo,\r\n} from \"../../helpers/constant\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\n\r\nimport GeneralModal from \"../common/GeneralModal\";\r\nimport WorldMap from \"../common/WorldMap\";\r\nimport { FlexTable, InitStackableTable } from \"../../helpers/responsive\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction NodeGuidelines({\r\n  data,\r\n  node_data,\r\n  toggleFavorite = (addr) => console.log(addr),\r\n  favorite,\r\n  tab,\r\n  setTab,\r\n  filterData,\r\n}) {\r\n  const [active, setActive] = useState(0);\r\n\r\n  return (\r\n    <>\r\n      <section className=\"sec-resources\">\r\n        <div className=\"container\">\r\n          <div className=\"resources-card\">\r\n            <h3>Node Set Up Requirements</h3>\r\n            <ul className=\"custom-support grid-3\">\r\n              <li>\r\n                <a href=\"https://doc.storx.io/storage-node.html\" target=\"_blank\">\r\n                  <div className=\"content\">\r\n                    <h3>Staking Requirements</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"https://doc.storx.io/storage-node.html\" target=\"_blank\">\r\n                  <div className=\"content\">\r\n                    <h3>Hardware Requirements</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"https://doc.storx.io/storage-node.html\" target=\"_blank\">\r\n                  <div className=\"content\">\r\n                    <h3>Software Requirements</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"resources-card\">\r\n            <h3>Node Setup Process</h3>\r\n            <ul className=\"custom-support grid-3\">\r\n              <li>\r\n                <a href=\"https://doc.storx.io/storage-node-manual.html\" target=\"_blank\">\r\n                  <div className=\"content\">\r\n                    <h3>Setup Node Manually</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\">\r\n                  <div className=\"content\">\r\n                    <h3>Setup Node Using Shell Script</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <NavLink exact to=\"/#farmnode\">\r\n                  <div className=\"content\">\r\n                    <h3>Verification of Node Setup</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </NavLink>\r\n                {/*<a href=\"/#farmnode\">\r\n                  <div className=\"content\">\r\n                    <h3>Verification of Node Setup</h3>\r\n                  </div>\r\n                  <div className=\"icon\">\r\n                    <img src={rightArrowIcon} alt=\"icon\"/>\r\n                  </div>\r\n                </a>*/}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NodeGuidelines;\r\n","D:\\github\\reactjs\\storx-farmer\\src\\components\\Dashboard\\OurFaqs.js",["334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { fromWei } from \"xdc3-utils\";\r\n\r\nimport FarmNode from \"../../assets/img/icons/farmnodes.png\";\r\nimport Staking from \"../../assets/img/icons/staking.png\";\r\nimport Rewards from \"../../assets/img/icons/staking-rewards.png\";\r\nimport HostingRewards from \"../../assets/img/icons/hosting-rewards.png\";\r\nimport rocketIcon from \"../../assets/img/icons/banner-rocket-icon.svg\";\r\nimport tickIcon from \"../../assets/img/icons/green-tick-icon.svg\";\r\nimport crossIcon from \"../../assets/img/icons/red-cross-icon.svg\";\r\nimport rightArrowIcon from \"../../assets/img/icons/right-arrow-white-icon.svg\";\r\nimport { fromXdcAddress, toXdcAddress } from \"../../wallets/xinpay\";\r\nimport { FormatNumber, FormatToken } from \"../../helpers/decimal\";\r\nimport {\r\n  ADDR_LINK,\r\n  EXPLORER,\r\n  Paginate,\r\n  PaginateNav,\r\n  RemoveExpo,\r\n} from \"../../helpers/constant\";\r\nimport { LOADER_BOX } from \"../common/common\";\r\n\r\nimport GeneralModal from \"../common/GeneralModal\";\r\nimport WorldMap from \"../common/WorldMap\";\r\nimport { FlexTable, InitStackableTable } from \"../../helpers/responsive\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faStar } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\nfunction OurFaqs() {\r\n  // State to track which accordion items are open for each tab\r\n  const [openAccordion, setOpenAccordion] = useState({\r\n    first: null,  // For first tab\r\n    second: null, // For second tab\r\n  });\r\n\r\n  const handleAccordionToggle = (tab, eventKey) => {\r\n    // If the clicked accordion is already open, close it (set it to null)\r\n    setOpenAccordion((prev) => ({\r\n      ...prev,\r\n      [tab]: prev[tab] === eventKey ? null : eventKey,\r\n    }));\r\n  };\r\n  return (\r\n    <>\r\n      <section className=\"sec-our-faqs\">\r\n        <div className=\"container\">\r\n          <h2>Frequently Asked Questions</h2>\r\n          <div className=\"faq-wrapper\">\r\n            <div className=\"faq-item\">\r\n              <h3>I have met the required hardware requirement as per the Document. How can I begin with the Node Installation?</h3>\r\n              <p>\r\n                To perform the node setup you can do that in two ways:\r\n                <br />\r\n                  Manually: <a href=\"https://doc.storx.io/storage-node-manual.html\" target=\"_blank\">https://doc.storx.io/storage-node-manual.html</a>\r\n                  <br />\r\n                    Using Shell scripts: <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\">https://doc.storx.io/storage-node-shell.html</a>\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>The reputation score in the node dashboard is not the same as the reputation score in the farmers site. Can we know the reason?</h3>\r\n              <p>\r\n                Till 31, Oct 2024, the last date for migration of active and inactive nodes to mainnet, only the active nodes shown in <a href=\"https://farmer.storx.io\" target=\"_blank\">farmer.storx.io</a> would be eligible for storage rewards.\r\n                If inactive nodes are migrated before 15th Oct, 2024, their reputation score in <a href=\"https://farmer.storx.io\" target=\"_blank\">farmer.storx.io</a> would be used to gauge their status (so they cannot claim any rewards before 15th Nov) and distribute rewards.\r\n                The dashboard score would not be relevant for storage rewards until 31 Oct, 2024.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Time for Upgradation for Storage Nodes</h3>\r\n              <p>\r\n                Active Nodes: 1st August, 2024 - 15 Oct, 2024<br />\r\n                Inactive Nodes: 15 Oct, 2024 - 31 Oct, 2024<br />\r\n                Post 31 Oct 2024, no upgrade would be possible, and beta storage node operators would need to unstake their node, claim staking tokens, and stake a new node at current staking limits as announced.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Do we know if the new servers will need Ubuntu 22 or still use the old 20?</h3>\r\n              <p>\r\n                Currently, we have not put up any requirements regarding the versions required for the setup of the new servers in Ubuntu. If such requirements arise, the team will update you on this.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>How can we ensure the graph is populated correctly? I cannot see it.</h3>\r\n              <p>\r\n                Activity status in the graph will be recorded only if you encounter the action happening in the dashboard.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>What does the uptime mean?</h3>\r\n              <p>\r\n                It is the status representing the server setup time.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>What is the last contact time?</h3>\r\n              <p>\r\n                It is the time stating the very recent visit to the website.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Do we need new VPSs that meet new requirements? Do these new nodes have to be staked at the current amount, 40000? Or can we migrate to a new VPS using whatever stake we have, and is it still valid?</h3>\r\n              <p>\r\n                Until the timelines stated for migration (Active Node: 1st August - 15 Oct & Inactive Nodes: 15 Oct - 31 Oct, 2024), there is no change in the staking amount.\r\n                Users can upgrade with their existing stake. You can use your existing VPS or upgrade your VPS/change ISP. The stake has no set requirement, as it is just an upgrade.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Should I update my current node to migrate to the mainnet?</h3>\r\n              <p>\r\n                You need to update the current node to the new available update. Refer to the link:\r\n                <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\">https://doc.storx.io/storage-node-shell.html</a>.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Do I have to UNSTAKE? Should I shut down my current VPS before setting up the new one?</h3>\r\n              <p>\r\n                You can set up a new node in the existing VPS. Just clean up all old data; you don’t need to unstake. Old staking will be continued in the current setup.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>How to set up the Uptime Robot correctly? I can't figure out which port? Previously, 50505 was used. And now how to set it up?</h3>\r\n              <p>\r\n                The uptime is going to be updated as the setup runs.\r\n              </p>\r\n            </div>\r\n            <div className=\"faq-item\">\r\n              <h3>I migrated my nodes following the instructions provided to a VPS that meets the new requirements. I am sending you links to my nodes. When can I turn off the old VPS?</h3>\r\n              <p>Once the migration to the new VPS is done, you can stop the old VPS.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>How can I check if the node is set up successfully?</h3>\r\n              <p>Once the node is set up, you can check the status of the node setup on this <a href=\"https://farmer.storx.io/\" target=\"_blank\">https://farmer.storx.io/</a>.\r\n                You just need to provide the wallet ID in the search bar to check its status. If it is active, then it is configured properly.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Can I upgrade the existing node using the upgrade option available in the shell script documentation?</h3>\r\n              <p>Yes, you can upgrade the same existing node only if the installation of the node was done previously using the steps mentioned in the shell script documentation. Then this will work, else it might need reinstallation of the node. For reinstallation, please visit the steps mentioned in the document: <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\">https://doc.storx.io/storage-node-shell.html</a></p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Is it possible to stake with this node without changing the \"Approved Amount 25,000\"?</h3>\r\n              <p>All users who have staked before 1st September, have the option to upgrade their existing nodes to mainnet without changing their existing node's staking amount.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Is there a way to change (or cancel) the \"Approved Amount 25,000\" to 40,000 for this node?</h3>\r\n              <p>If the node is in an active state in <a href=\"https://farmer.storx.io\" target=\"_blank\">farmer.storx</a>, then they can migrate to mainnet before 15 Oct.\r\n                If the node is in an inactive state, they would have to wait until 15 Oct 2024 for migration to mainnet. If the inactive node migrates before 15 Oct, they would still remain inactive and ineligible for storage rewards.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Is staking for this node already possible? Or will it be available after October 16th or November 1st? Please let me know the date when staking will be possible.</h3>\r\n              <p>Since you have a specific node-related question, we would review the node details and confirm with you specifically. For more details on your node, connect to the support team on Discord, or the StorX support team.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Disqualified for rewards but the operator can still claim the staked amount, right?</h3>\r\n              <p>All inactive nodes, having active servers, are eligible to claim their staking token. They can follow the instructions provided for unstaking and claim their stake amount within 7 days until 31 Oct, 2024.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>For how long can a node stay below 1250 rep? Does it ever get turned off by the team with a staked amount burn?</h3>\r\n              <p>While in Beta, we were not disqualifying and burning the staking rewards. In the mainnet, we have mapped all the storage nodes with their respective email address. This ensures that storage nodes are informed if the nodes are defaulting and at risk of default, with the staking node being burnt.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Either VPS is off or parameters are too low, reputation would fall below 1250. Is that when operators should reach for support to find out if data was lost and if they can claim the staked amount or not?</h3>\r\n              <p>Yes, if your VPS is off, then you need to reach out to the support team immediately to inform them about the data not being available. On nodes marked as repeated defaulters, it's under risk of being put up for stake burn.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Most of my nodes have rep around 150. Does this mean I should change VPS providers before upgrading to mainnet?</h3>\r\n              <p>No, it's not needed. If your current VPS meets new requirements, you can migrate with any active node. Follow the instructions to set up your node using the documentation available by StorX.\r\n                If you need a new VPS, just launch the mainnet node, then wipe and cancel the old one. Reputation until launch is just a placard; it won't move anymore. Post-launch, the new reputation visible via the URL will be taken into account.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Do we have any confidence that the node will re-gain rep if I switch the VPS?</h3>\r\n              <p>ANS: After the new enhancement made after looking into the issues earlier we can say Yes it's totally different now, there is a difficulty test during setup and all mainnet nodes start with 4900 rep. You may follow the document for the setting up of the node <a href=\"https://doc.storx.io/storage-node-shell.html\">here</a>. You can navigate through that doc for all information.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Can we update the wallet id?</h3>\r\n              <p>ANS: We can do the wallet id update by changing the credentials in the .env file. Run the following command:\r\n                <code>sudo bash nano .env</code></p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>I have some questions regarding a node on the mainnet.</h3>\r\n              <p>I have a node (wallet) that was created before September 1st with an \"Approved Amount 25,000\" status and is currently unstaked. Recently, I completed the mainnet node setup with this wallet.</p>\r\n              <p>Wallet: xdceBXXXXXXXXXXXXXXXXXXXXX</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Q1: Is it possible to stake with this node without changing the \"Approved Amount 25,000\"?</h3>\r\n              <p>ANS: All users who have staked before 1st September have the option to upgrade their existing nodes to mainnet without changing their existing node's staking amount.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Q2: Is there a way to change (or cancel) the \"Approved Amount 25,000\" to 40,000 for this node?</h3>\r\n              <p>ANS: If the node is in active state in farmer.storx, then they can migrate to mainnet before 15 Oct. If the node is in inactive state, they would have to wait until 15 Oct 2024 for migrating to mainnet. If the inactive node migrates before 15 Oct, they would still remain inactive and ineligible for storage rewards.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Q3: Is staking for this node already possible? Or will it be available after October 16th or November 1st? Please let me know the date when staking will be possible.</h3>\r\n              <p>ANS: Since you have specific node related questions, we would review the node details and confirm with you specifically.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>What if the reputation in the node dashboard we are showing is not the same as the reputation in the farmers site?</h3>\r\n              <p>ANS: Till 31 Oct 2024, the last date for migration of active and inactive nodes to mainnet, only the eligible, active nodes shown in farmer.storx.io would be eligible for storage rewards. If inactive nodes are migrated before 15th Oct, 2024, their reputation score in farmer.storx.io would be used to gauge their status (so they cannot claim any rewards before 15th Nov) and distribute rewards. The dashboard score would not be relevant for storage rewards until 31 Oct, 2024.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Time for Upgradation for Storage Nodes</h3>\r\n              <p>1. Active Nodes: 1st August, 2024 - 15 Oct, 2024</p>\r\n              <p>2. Inactive Nodes: 15 Oct, 2024 - 31 Oct, 2024</p>\r\n              <p>Post 31 Oct 2024, no upgrade would be possible and beta storage node operators would need to unstake their node, claim staking tokens, and stake a new node at current staking limits announced.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Can you explain what happens if a VPS gets wiped/lost, the node turns inactive but the operator can still claim (with a 1-month cool off period)? How exactly do we risk losing the staked amount?</h3>\r\n              <p>ANS: If the VPS is wiped/lost, this is considered a breach of service terms. The user would have to inform us at <a href=\"mailto:support@storx.io\">support@storx.io</a>. Since the Storage Node was not available, the users would be unable to reclaim their staking deposit. If the VPS data is intact, then they can proceed with resigning the node, and that would be considered as a graceful exit. They would have to wait for one month and proceed with cancellation of node and reclaim staking deposit.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>So if an incident occurs on the hardware or VPS provider side, if the operator informs support, can they still claim their staked amount, even if the data has been lost?</h3>\r\n              <p>ANS: The nodes are paid to keep the data intact. The node operator is responsible for ensuring that the data is intact and available to users. In the mainnet, there is an option for users to do a graceful exit by giving a notice of 1 month so that the user data can be backed up. Contabo had a service downtime and not data being lost. To be very specific to your case, you can still send the email to support. We can evaluate the details of the node and revert back. The incident needs to be reported and reviewed for exact resolutions.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>So how long will inactive nodes (reputation under 1250) remain visible in the network before they are canceled?</h3>\r\n              <p>Ans:--Inactive nodes have been allocated dates from 15 Oct - 31 Oct 2024, to upgrade to mainnet irrespective of their reputation score in Beta. Post 31 Oct all Beta nodes (Inactive/Active Nodes) would be set to cancellation mode, Node operators would have One month to cancel their nodes and reclaim the staking amount.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Once min reputation for active nodes will be 1250. What will happen to nodes under that score?</h3>\r\n              <p>Ans:--All eligible nodes migrated from beta to mainnet are currently added with max reputation the mainnet currently. The reputation would show changes only if your nodes goes below the quality parameters prescribed.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>What is the time period in which they can reach for support, or try to regain reputation? Will the team ever delete an existing node with a reputation under 1250?</h3>\r\n              <p>Ans:--If the vps is not available they need to reach out to the support team immediately, This requires additional verification which needs to be provided on a case to case basis. We would try our best to help the storage node operators, But this cannot be assured.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>If a node/ VPS is deleted, will the node ID still be visible on the Farmer page?</h3>\r\n              <p>Ans:--Yes, this has to be manually removed by the support team.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Please explain in detail how the node deletion works and what happens to the staked amount if the operator isn't eligible to claim it back.</h3>\r\n              <p>Ans:--If the node is not available for a long time (more than 3 months in a row without notice) They risk being burned.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Is it possible to change VPS providers without losing my stake position?</h3>\r\n              <p>Ans:--I am assuming that your nodes are currently in active state, Since you have not mentioned it specifically, All active nodes can migrate their existing storage nodes or can change ISP or Storage Nodes without changing their staking limit. Users would have to follow the step by step guidelines as suggested to upgrade their node. They would be promoted to provide node id details and email address during the upgrade process. Once completed your node would be live with the same id and specific staking limit. If your node is in an inactive state you would be required to do the migration during the timeline of 15 to 31 Oct, 2024.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>I missed my monthly payment for my vps with Contabo and now the server has been wiped and I no longer have access to it. Does this mean I lost my node or is it possible to recover it?</h3>\r\n              <p>Ans:--You can continue migration or the node setup with the existing credentials but making sure you are satisfying the criteria as mentioned in the documentation provided by storX.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>How can I set up my node if the docker version is not updated?</h3>\r\n              <p>Ans:--Command to Uninstall the docker Completely:--</p>\r\n              <p>sudo apt-get purge docker-engine <br/>\r\nsudo apt-get purge docker<br/>\r\nsudo apt-get autoremove<br/>\r\nsudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli<br/>\r\nRemoving the docker directories<br/>\r\nsudo rm -rf /var/lib/docker /etc/docker<br/>\r\nsudo rm /etc/apparmor.d/docker<br/>\r\nsudo groupdel docker<br/>\r\nsudo rm -rf /var/run/docker.sock<br/>\r\nsudo rm -rf /var/lib/containerd<br/>\r\nsudo rm -r ~/.docker<br/>\r\nChecking the docker is uninstalled properly:--<br/>\r\ndocker Once the docker is uninstalled you will get the “No such directories / No such file exist.”<br/>\r\nReinstalling the docker using the command:--<br/>\r\nsudo bash bootstrap.sh<br/>\r\nChecking the Docker Version<br/>\r\ndocker --version<br/>\r\nYou can check the version of the docker using the above command.<br/>\r\nIf this gives you the output with version means the docker is installed successfully.<br/>\r\nCheck for the Docker status<br/>\r\nsudo systemctl status docker<br/>\r\nMake sure the status is active here.<br/>\r\nStarting the Docker<br/>\r\nsudo systemctl start docker<br/>\r\nIf the status is inactive you need to start the docker using the above command.<br/>\r\nValidating if any container is running in the docker<br/>\r\ndocker ps<br/>\r\nThe above command will give you the container running status<br/>\r\nNow you can run the command<br/>\r\nsudo bash start-node.sh<br/>\r\nThis will start the node.<br/>\r\nChecking for the logs<br/>\r\nsudo bash check-logs.sh<br/>\r\nThis will give you the output of the docker running container status.</p>\r\n            </div>\r\n\r\n            <div className=\"faq-item\">\r\n              <h3>Is it possible to create a new node (with 40k min stake) using the migration script used for migrating the existing nodes?</h3>\r\n              <p>Ans:--Yes it is possible to create a new node with the script provided make sure you are following the criteria as mentioned in the document.</p>\r\n            </div>\r\n\r\n\r\n          </div>\r\n         {/* <div className=\"faq-wrapper\">\r\n            <Accordion>\r\n              <div className={`accordion-item ${openAccordion.first === \"0\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"0\" onClick={() => handleAccordionToggle(\"first\", \"0\")}>\r\n                    How can I begin with the Node Installation?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If you have met the required hardware requirements as per the documentation, you can start the node setup using one of the two methods:\r\n                    </p>\r\n                    <ol>\r\n                      <li>\r\n                        <strong>Manually:</strong> Follow the instructions provided in the{\" \"}\r\n                        <a href=\"https://doc.storx.io/storage-node-manual.html\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          manual setup guide\r\n                        </a>.\r\n                      </li>\r\n                      <li>\r\n                        <strong>Using Shell Scripts:</strong> Follow the instructions provided in the{\" \"}\r\n                        <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          shell script guide\r\n                        </a>.\r\n                      </li>\r\n                    </ol>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n              <div className={`accordion-item ${openAccordion.first === \"1\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"1\" onClick={() => handleAccordionToggle(\"first\", \"1\")}>\r\n                    Why is the reputation score in the node dashboard different from the reputation score on the farmer site?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"1\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>The reputation scores differ because:</p>\r\n                    <ul>\r\n                      <li>\r\n                        <strong>Migration to Mainnet Deadline:</strong> Until <strong>31st October 2024</strong>, only the active nodes listed on{\" \"}\r\n                        <a href=\"https://farmer.storx.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          farmer.storx.io\r\n                        </a>{\" \"}\r\n                        will be eligible for storage rewards.\r\n                      </li>\r\n                      <li>\r\n                        <strong>Inactive Nodes:</strong> If inactive nodes are migrated <strong>before 15th October 2024</strong>, their reputation score on the farmer site will be used to determine their status. These nodes will not be able to claim rewards before <strong>15th November 2024</strong>.\r\n                      </li>\r\n                      <li>\r\n                        <strong>Dashboard Score:</strong> The score shown on the node dashboard will not be considered for storage rewards until <strong>31st October 2024</strong>.\r\n                      </li>\r\n                    </ul>\r\n                    <p>\r\n                      <strong>Upgrade Deadlines:</strong>\r\n                    </p>\r\n                    <ul>\r\n                      <li>\r\n                        <strong>Active Nodes:</strong> Upgrade between <strong>1st August 2024 – 15th October 2024</strong>.\r\n                      </li>\r\n                      <li>\r\n                        <strong>Inactive Nodes:</strong> Upgrade between <strong>15th October 2024 – 31st October 2024</strong>.\r\n                      </li>\r\n                    </ul>\r\n                    <p>\r\n                      Post <strong>31st October 2024</strong>, no upgrades will be possible. Beta storage node operators will need to unstake their node, claim staking tokens, and stake a new node at the current staking limits as announced.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 2\r\n              <div className={`accordion-item ${openAccordion.first === \"2\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"2\" onClick={() => handleAccordionToggle(\"first\", \"2\")}>\r\n                    Do we know if the new servers will need Ubuntu 22 or still use the old 20?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"2\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Currently, we have not established specific requirements regarding the versions required for the setup of the new servers for Ubuntu users. If such a requirement arises, the team will provide an update.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 3\r\n              <div className={`accordion-item ${openAccordion.first === \"3\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"3\" onClick={() => handleAccordionToggle(\"first\", \"3\")}>\r\n                    How can we ensure the graph is populated correctly? I cannot see it.\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"3\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Activity status in the graph will be recorded only when an action occurs within the dashboard.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 4\r\n              <div className={`accordion-item ${openAccordion.first === \"4\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"4\" onClick={() => handleAccordionToggle(\"first\", \"4\")}>\r\n                    What does the uptime mean?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"4\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>It is the status representing the server setup time.</p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 5\r\n              <div className={`accordion-item ${openAccordion.first === \"5\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"5\" onClick={() => handleAccordionToggle(\"first\", \"5\")}>\r\n                    What is the last contact time?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"5\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>It is the time stating the most recent visit to the website.</p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 6\r\n              <div className={`accordion-item ${openAccordion.first === \"6\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"6\" onClick={() => handleAccordionToggle(\"first\", \"6\")}>\r\n                    Do we need new VPSs that meet new requirements? Do these new nodes have to be staked at the current amount, 40,000? Or can we migrate to a new VPS using whatever stake we have, and is it still valid?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"6\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Until the timelines stated for migration (\r\n                      <strong>Active Node:</strong> 1st August - 15th October & <strong>Inactive Nodes:</strong> 15th October - 31st October, 2024), there is no change in the staking amount. Users can upgrade using their existing stake. You may use your existing VPS, upgrade your VPS, or change your ISP. The stake remains valid as it is just an upgrade.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 7\r\n              <div className={`accordion-item ${openAccordion.first === \"7\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"7\" onClick={() => handleAccordionToggle(\"first\", \"7\")}>\r\n                    Should I update my current node to migrate to the mainnet?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"7\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      You need to update the current node to the new available update. Refer to the link:{\" \"}\r\n                      <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        https://doc.storx.io/storage-node-shell.html\r\n                      </a>.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 8\r\n              <div className={`accordion-item ${openAccordion.first === \"8\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"8\" onClick={() => handleAccordionToggle(\"first\", \"8\")}>\r\n                    Do I have to UNSTAKE? Should I shut down my current VPS before setting up the new one?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"8\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      You can set up a new node in the existing VPS. Just clean up all old data; you don’t need to unstake. Old\r\n                      staking will be continued in the current setup.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 9\r\n              <div className={`accordion-item ${openAccordion.first === \"9\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"9\" onClick={() => handleAccordionToggle(\"first\", \"9\")}>\r\n                    How to set up the Uptime Robot correctly? I can't figure out which port? Previously, 50505 was used. And now how\r\n                    to set it up?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"9\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>The uptime is going to be updated as the setup runs.</p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 10\r\n              <div className={`accordion-item ${openAccordion.first === \"10\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"10\" onClick={() => handleAccordionToggle(\"first\", \"10\")}>\r\n                    I migrated my nodes following the instructions provided to a VPS that meets the new requirements. I am sending\r\n                    you links to my nodes. When can I turn off the old VPS?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"10\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Once the migration to the new VPS is done, you can stop the old VPS.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 11\r\n              <div className={`accordion-item ${openAccordion.first === \"11\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"11\" onClick={() => handleAccordionToggle(\"first\", \"11\")}>\r\n                    How can I check if the node is set up successfully?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"11\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Once the node is set up, you can check the status of the node setup on{\" \"}\r\n                      <a href=\"https://farmer.storx.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        https://farmer.storx.io/\r\n                      </a>\r\n                      . You just need to provide the wallet ID in the search bar to check its status. If it is active, then it is\r\n                      configured properly.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 12\r\n              <div className={`accordion-item ${openAccordion.first === \"12\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"12\" onClick={() => handleAccordionToggle(\"first\", \"12\")}>\r\n                    Can I upgrade the existing node using the upgrade option available in the shell script documentation?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"12\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, you can upgrade the same existing node only if the installation of the node was previously done using\r\n                      the steps mentioned in the shell script documentation. Then this will work; otherwise, it might require\r\n                      reinstallation of the node. For reinstallation, please visit the steps mentioned in the document:{\" \"}\r\n                      <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        https://doc.storx.io/storage-node-shell.html\r\n                      </a>\r\n                      .\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 13\r\n              <div className={`accordion-item ${openAccordion.first === \"13\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"13\" onClick={() => handleAccordionToggle(\"first\", \"13\")}>\r\n                    Is it possible to stake with this node without changing the \"Approved Amount 25,000\"?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"13\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      All users who staked before 1st September have the option to upgrade their existing nodes to mainnet without\r\n                      changing their existing node staking amount.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 14\r\n              <div className={`accordion-item ${openAccordion.first === \"14\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"14\" onClick={() => handleAccordionToggle(\"first\", \"14\")}>\r\n                    Is there a way to change (or cancel) the \"Approved Amount 25,000\" to 40,000 for this node?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"14\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the node is in an active state on{\" \"}\r\n                      <a href=\"https://farmer.storx.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        farmer.storx\r\n                      </a>\r\n                      , it can migrate to the mainnet before 15 Oct 2024. If the node is inactive, you must wait until 15 Oct 2024\r\n                      to migrate. If an inactive node migrates before 15 Oct 2024, it will remain inactive and ineligible for\r\n                      storage rewards.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 15\r\n              <div className={`accordion-item ${openAccordion.first === \"15\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"15\" onClick={() => handleAccordionToggle(\"first\", \"15\")}>\r\n                    Is staking for this node already possible? Or will it be available after October 16th or November 1st?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"15\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Since this is a node-specific question, we will review the node details and confirm with you. For more\r\n                      information, connect with the support team on Discord or StorX Support.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 16\r\n              <div className={`accordion-item ${openAccordion.first === \"16\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"16\" onClick={() => handleAccordionToggle(\"first\", \"16\")}>\r\n                    Disqualified for rewards but the operator can still claim the staked amount, right?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"16\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      All inactive nodes with active servers are eligible to claim their staking tokens. Follow the instructions\r\n                      provided for unstaking, and you can claim your staked amount within 7 days until 31 Oct 2024.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 17\r\n              <div className={`accordion-item ${openAccordion.first === \"17\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"17\" onClick={() => handleAccordionToggle(\"first\", \"17\")}>\r\n                    For how long can a node stay below 1250 reputation? Does it ever get turned off by the team with a staked amount burn?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"17\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      During the beta phase, nodes were not disqualified or had their staking burned. In the mainnet, all storage\r\n                      nodes are mapped to their respective email addresses to ensure operators are informed if their nodes are at\r\n                      risk of default. Repeated defaulters are subject to staking burns.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 18\r\n              <div className={`accordion-item ${openAccordion.first === \"18\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"18\" onClick={() => handleAccordionToggle(\"first\", \"18\")}>\r\n                    Either VPS is off or parameters are too low—should operators reach out to support if data is lost?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"18\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, if your VPS is off, reach out to the support team immediately to inform them about the data unavailability. Nodes marked as repeated defaulters are at risk of staking burns.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 19\r\n              <div className={`accordion-item ${openAccordion.first === \"19\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"19\" onClick={() => handleAccordionToggle(\"first\", \"19\")}>\r\n                    Most of my nodes have a reputation of around 150. Should I change VPS providers before upgrading to mainnet?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"19\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      No, it's not needed. If your current VPS meets the new requirements, you can migrate with any active node. Follow the instructions in the StorX documentation to set up your node. If you need a new VPS, launch the mainnet node, then wipe and cancel the old one. Pre-launch reputation is just indicative; post-launch, the new reputation visible via the URL will be taken into account.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 20\r\n              <div className={`accordion-item ${openAccordion.first === \"20\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"20\" onClick={() => handleAccordionToggle(\"first\", \"20\")}>\r\n                    Do we have confidence that the node will regain reputation if I switch the VPS?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"20\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, with the new enhancements addressing previous issues, nodes now start with a reputation of 4900. Follow the updated documentation at{\" \"}\r\n                      <a href=\"https://doc.storx.io/storage-node-shell.html\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        https://doc.storx.io/storage-node-shell.html\r\n                      </a>{\" \"}\r\n                      for setting up the node.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n               Item 21\r\n              <div className={`accordion-item ${openAccordion.first === \"21\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"21\" onClick={() => handleAccordionToggle(\"first\", \"21\")}>\r\n                    Can we update the wallet ID?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"21\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, you can update the wallet ID by modifying the credentials in the <code>.env</code> file using the command:\r\n                      <br />\r\n                      <code>sudo bash nano .env</code>\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"22\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"22\" onClick={() => handleAccordionToggle(\"first\", \"22\")}>\r\n                    Is it possible to stake with this node without changing the \"Approved Amount 25,000\"?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"22\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      All users who have staked before 1st September have the option to\r\n                      upgrade their existing nodes to mainnet without changing their existing\r\n                      node's staking amount.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"23\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"23\" onClick={() => handleAccordionToggle(\"first\", \"23\")}>\r\n                    Is there a way to change (or cancel) the \"Approved Amount 25,000\" to 40,000 for this node?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"23\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the node is in <strong>active state</strong> in{\" \"}\r\n                      <a href=\"https://farmer.storx.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        farmer.storx\r\n                      </a>\r\n                      , the user can migrate to the mainnet before <strong>15 Oct 2024</strong>.\r\n                    </p>\r\n                    <p>\r\n                      If the node is in <strong>inactive state</strong>, the user will have to wait until{\" \"}\r\n                      <strong>15 Oct 2024</strong> for migration to the mainnet.\r\n                    </p>\r\n                    <p>\r\n                      <strong>Note:</strong> If an inactive node migrates before <strong>15 Oct 2024</strong>, it\r\n                      will remain inactive and ineligible for storage rewards.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"24\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"24\" onClick={() => handleAccordionToggle(\"first\", \"24\")}>\r\n                    Is staking for this node already possible? Or will it be available after October 16th or November 1st?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"24\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Since this is a node-specific query, the node details need to be reviewed to provide an\r\n                      accurate answer. For more information, connect with the support team on{\" \"}\r\n                      <a href=\"https://discord.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Discord\r\n                      </a>{\" \"}\r\n                      or StorX Support.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"25\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"25\" onClick={() => handleAccordionToggle(\"first\", \"25\")}>\r\n                    What if the reputation in the node dashboard we are showing is not the same as the reputation on the farmer's site?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"25\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Till <strong>31 Oct 2024</strong>, the last date for migration of active and inactive nodes\r\n                      to the mainnet, only the eligible active nodes shown in{\" \"}\r\n                      <a href=\"https://farmer.storx.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        farmer.storx.io\r\n                      </a>{\" \"}\r\n                      will be eligible for storage rewards.\r\n                    </p>\r\n                    <p>\r\n                      If inactive nodes are migrated before <strong>15 Oct 2024</strong>, their reputation score\r\n                      on <strong>farmer.storx.io</strong> will determine their status and rewards eligibility.\r\n                      The dashboard score will not be relevant for storage rewards until <strong>31 Oct 2024</strong>.\r\n                    </p>\r\n                    <p>\r\n                      <strong>Time for Upgradation for Storage Nodes:</strong>\r\n                    </p>\r\n                    <ul>\r\n                      <li>Active Nodes: 1st August 2024 - 15 Oct 2024</li>\r\n                      <li>Inactive Nodes: 15 Oct 2024 - 31 Oct 2024</li>\r\n                    </ul>\r\n                    <p>\r\n                      Post <strong>31 Oct 2024</strong>, no upgrades will be possible, and beta storage node\r\n                      operators will need to unstake their node, claim staking tokens, and stake a new node at\r\n                      current staking limits announced.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"26\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"26\" onClick={() => handleAccordionToggle(\"first\", \"26\")}>\r\n                    What happens if a VPS gets wiped/lost, the node turns inactive, but the operator can still claim the staked amount with a 1-month cool-off period?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"26\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the VPS is wiped/lost, it is considered a breach of service terms. The operator must\r\n                      inform support by emailing{\" \"}\r\n                      <a href=\"mailto:support@storx.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        support@storx.io\r\n                      </a>\r\n                      . Since the storage node was unavailable, the user will be unable to reclaim their staking\r\n                      deposit.\r\n                    </p>\r\n                    <p>\r\n                      If the VPS data is intact, the operator can proceed with resigning the node. This is\r\n                      considered a <strong>graceful exit</strong>, requiring a 1-month waiting period before\r\n                      proceeding with node cancellation and reclaiming the staking deposit.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"27\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"27\" onClick={() => handleAccordionToggle(\"first\", \"27\")}>\r\n                    Can the operator still claim their staked amount if a hardware or VPS provider incident occurs and the data is lost?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"27\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      The nodes are responsible for keeping data intact and available to users. If data is lost\r\n                      due to a hardware or VPS provider incident, the operator must report the incident to{\" \"}\r\n                      <a href=\"mailto:support@storx.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        support@storx.io\r\n                      </a>{\" \"}\r\n                      for evaluation.\r\n                    </p>\r\n                    <p>\r\n                      If the issue qualifies for a resolution, a <strong>graceful exit</strong> can be\r\n                      initiated. This involves a 1-month notice period to back up user data. If the data cannot\r\n                      be restored, claiming the staked amount may not be possible.\r\n                    </p>\r\n                    <p>\r\n                      Specific incidents (like Contabo downtime without data loss) will be reviewed case by case.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n             <div className={`accordion-item ${openAccordion.first === \"28\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"28\" onClick={() => handleAccordionToggle(\"first\", \"28\")}>\r\n                    How long will inactive nodes (reputation under 1250) remain visible in the network before they are canceled?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"28\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Inactive nodes have been allocated dates from <strong>15 Oct 2024</strong> to{\" \"}\r\n                      <strong>31 Oct 2024</strong> to upgrade to the mainnet, irrespective of their reputation\r\n                      score in beta.\r\n                    </p>\r\n                    <p>\r\n                      Post <strong>31 Oct 2024</strong>, all beta nodes (active/inactive) will enter\r\n                      cancellation mode. Node operators will have 1 month to cancel their nodes and reclaim their\r\n                      staking amount.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n             <div className={`accordion-item ${openAccordion.first === \"29\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"29\" onClick={() => handleAccordionToggle(\"first\", \"29\")}>\r\n                    What will happen to nodes with a reputation under 1250 after the minimum reputation requirement for active nodes?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"29\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      All eligible nodes migrated from beta to mainnet currently start with the maximum reputation\r\n                      on the mainnet. Reputation changes will occur only if nodes fall below the prescribed\r\n                      quality parameters.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"30\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"30\" onClick={() => handleAccordionToggle(\"first\", \"30\")}>\r\n                    What is the time period in which operators can contact support or attempt to regain reputation? Will the team delete nodes with reputation under 1250?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"30\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the VPS is unavailable, operators must immediately contact support for verification. The\r\n                      support team will handle cases individually, but resolutions cannot be guaranteed.\r\n                    </p>\r\n                    <p>\r\n                      Operators are advised to address issues proactively to maintain reputation and avoid\r\n                      potential disqualification.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"31\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"31\" onClick={() => handleAccordionToggle(\"first\", \"31\")}>\r\n                    If a node/VPS is deleted, will the node ID still be visible on the Farmer page?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"31\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, the node ID will still be visible on the Farmer page, but it has to be manually removed by the support team.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"32\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"32\" onClick={() => handleAccordionToggle(\"first\", \"32\")}>\r\n                    Please explain in detail how the node deletion works and what happens to the staked amount if the operator isn't eligible to claim it back.\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"32\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the node is unavailable for a long time (more than 3 months in a row without notice), the operator risks the node being burned.\r\n                    </p>\r\n                    <p>\r\n                      If the node is in an active state, it can migrate the storage node or change the ISP without affecting the staking limit. However, operators need to follow the migration process, providing node ID details and email address during the upgrade. Once completed, the node will go live with the same ID and staking limit.\r\n                    </p>\r\n                    <p>\r\n                      If the node is inactive, operators need to perform migration between 15 to 31 October 2024 to avoid losing the node.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"33\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"33\" onClick={() => handleAccordionToggle(\"first\", \"33\")}>\r\n                    I missed my monthly payment for my VPS with Contabo and now the server has been wiped and I no longer have access to it. Does this mean I lost my node or is it possible to recover it?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"33\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      You can still recover the node. You can continue with the migration or re-setup of your node using the existing credentials, ensuring that you meet the criteria mentioned in the StorX documentation.\r\n                    </p>\r\n                    <p>\r\n                      Be sure to follow the setup guidelines provided in the documentation, and reach out to support if you encounter issues during the process.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"34\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"34\" onClick={() => handleAccordionToggle(\"first\", \"34\")}>\r\n                    How can I set up my node if the Docker version is not updated?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"34\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      If the Docker version is not updated, follow these steps to uninstall and reinstall Docker and set up your node:\r\n                    </p>\r\n                    <h5>Uninstall Docker Completely:</h5>\r\n                    <pre><code>\r\n        sudo apt-get purge docker-engine\r\n        sudo apt-get purge docker\r\n        sudo apt-get autoremove\r\n        sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli\r\n      </code></pre>\r\n\r\n                    <h5>Remove Docker Directories:</h5>\r\n                    <pre><code>\r\n        sudo rm -rf /var/lib/docker /etc/docker\r\n        sudo rm /etc/apparmor.d/docker\r\n        sudo groupdel docker\r\n        sudo rm -rf /var/run/docker.sock\r\n        sudo rm -rf /var/lib/containerd\r\n        sudo rm -r ~/.docker\r\n      </code></pre>\r\n\r\n                    <h5>Check if Docker is Uninstalled Properly:</h5>\r\n                    <pre><code>\r\n        docker\r\n      </code></pre>\r\n                    <p>\r\n                      Once Docker is uninstalled, you should see \"No such directories / No such file exists.\"\r\n                    </p>\r\n\r\n                    <h5>Reinstall Docker:</h5>\r\n                    <pre><code>\r\n        sudo bash bootstrap.sh\r\n      </code></pre>\r\n\r\n                    <h5>Check Docker Version:</h5>\r\n                    <pre><code>\r\n        docker --version\r\n      </code></pre>\r\n                    <p>\r\n                      Use the above command to check the Docker version. If it displays the version, Docker is installed successfully.\r\n                    </p>\r\n\r\n                    <h5>Check Docker Status:</h5>\r\n                    <pre><code>\r\n        sudo systemctl status docker\r\n      </code></pre>\r\n                    <p>\r\n                      Ensure that the status is \"active\" here.\r\n                    </p>\r\n\r\n                    <h5>Start Docker if Inactive:</h5>\r\n                    <pre><code>\r\n        sudo systemctl start docker\r\n      </code></pre>\r\n                    <p>\r\n                      If the Docker status is inactive, you can start it with the above command.\r\n                    </p>\r\n\r\n                    <h5>Validate if Any Container is Running:</h5>\r\n                    <pre><code>\r\n        docker ps\r\n      </code></pre>\r\n                    <p>\r\n                      The above command will show the container's running status.\r\n                    </p>\r\n\r\n                    <h5>Run the Node:</h5>\r\n                    <pre><code>\r\n        sudo bash start-node.sh\r\n      </code></pre>\r\n                    <p>\r\n                      This will start your node.\r\n                    </p>\r\n\r\n                    <h5>Check Node Logs:</h5>\r\n                    <pre><code>\r\n        sudo bash check-logs.sh\r\n      </code></pre>\r\n                    <p>\r\n                      Use this command to view the logs of the Docker running container's status.\r\n                    </p>\r\n\r\n                    <p>\r\n                      Once you get the correct status as per the StorX documentation, you can continue with the node setup in your browser URL.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n              <div className={`accordion-item ${openAccordion.first === \"35\" ? \"open\" : \"\"}`}>\r\n                <div className=\"accordion-button\">\r\n                  <Accordion.Toggle as=\"div\" eventKey=\"35\" onClick={() => handleAccordionToggle(\"first\", \"35\")}>\r\n                    Is it possible to create a new node (with 40k min stake) using the migration script used for migrating the existing nodes?\r\n                  </Accordion.Toggle>\r\n                </div>\r\n                <Accordion.Collapse eventKey=\"35\">\r\n                  <div className=\"accordion-body\">\r\n                    <p>\r\n                      Yes, it is possible to create a new node with the 40k minimum stake using the migration script. However, make sure that you are following all the criteria as outlined in the documentation provided. The process should be completed as per the given steps to ensure proper setup.\r\n                    </p>\r\n                  </div>\r\n                </Accordion.Collapse>\r\n              </div>\r\n\r\n            </Accordion>\r\n          </div>*/}\r\n          {/*<div className=\"tabs-wrapper\">\r\n            <Tab.Container defaultActiveKey=\"first\">\r\n              <div className=\"tabs-header\">\r\n                <Nav variant=\"pills\">\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"first\">Overview</Nav.Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Nav.Link eventKey=\"second\">Itinerary</Nav.Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n              </div>\r\n              <div className=\"tabs-body\">\r\n                <Tab.Content>\r\n                  <Tab.Pane eventKey=\"first\">\r\n                    <div className=\"faq-wrapper\">\r\n                      <Accordion>\r\n                        <div\r\n                            className={`accordion-item ${openAccordion.first === \"0\" ? \"open\" : \"\"}`}\r\n                        >\r\n                          <div className=\"accordion-button\">\r\n                            <Accordion.Toggle\r\n                                as=\"div\"\r\n                                eventKey=\"0\"\r\n                                onClick={() => handleAccordionToggle(\"first\", \"0\")}\r\n                            >\r\n                              Accordion Item #1\r\n                            </Accordion.Toggle>\r\n                          </div>\r\n                          <Accordion.Collapse eventKey=\"0\">\r\n                            <div className=\"accordion-body\">\r\n                              <p>\r\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                              </p>\r\n                            </div>\r\n                          </Accordion.Collapse>\r\n                        </div>\r\n                        <div\r\n                            className={`accordion-item ${openAccordion.first === \"1\" ? \"open\" : \"\"}`}\r\n                        >\r\n                          <div className=\"accordion-button\">\r\n                            <Accordion.Toggle\r\n                                as=\"div\"\r\n                                eventKey=\"1\"\r\n                                onClick={() => handleAccordionToggle(\"first\", \"1\")}\r\n                            >\r\n                              Accordion Item #2\r\n                            </Accordion.Toggle>\r\n                          </div>\r\n                          <Accordion.Collapse eventKey=\"1\">\r\n                            <div className=\"accordion-body\">\r\n                              <p>\r\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                              </p>\r\n                            </div>\r\n                          </Accordion.Collapse>\r\n                        </div>\r\n                      </Accordion>\r\n                    </div>\r\n                  </Tab.Pane>\r\n                  <Tab.Pane eventKey=\"second\">\r\n                    <div className=\"faq-wrapper\">\r\n                      <Accordion>\r\n                        <div\r\n                            className={`accordion-item ${openAccordion.second === \"0\" ? \"open\" : \"\"}`}\r\n                        >\r\n                          <div className=\"accordion-button\">\r\n                            <Accordion.Toggle\r\n                                as=\"div\"\r\n                                eventKey=\"0\"\r\n                                onClick={() => handleAccordionToggle(\"second\", \"0\")}\r\n                            >\r\n                              Accordion Item #1\r\n                            </Accordion.Toggle>\r\n                          </div>\r\n                          <Accordion.Collapse eventKey=\"0\">\r\n                            <div className=\"accordion-body\">\r\n                              <p>\r\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                              </p>\r\n                            </div>\r\n                          </Accordion.Collapse>\r\n                        </div>\r\n                        <div\r\n                            className={`accordion-item ${openAccordion.second === \"1\" ? \"open\" : \"\"}`}\r\n                        >\r\n                          <div className=\"accordion-button\">\r\n                            <Accordion.Toggle\r\n                                as=\"div\"\r\n                                eventKey=\"1\"\r\n                                onClick={() => handleAccordionToggle(\"second\", \"1\")}\r\n                            >\r\n                              Accordion Item #2\r\n                            </Accordion.Toggle>\r\n                          </div>\r\n                          <Accordion.Collapse eventKey=\"1\">\r\n                            <div className=\"accordion-body\">\r\n                              <p>\r\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n                              </p>\r\n                            </div>\r\n                          </Accordion.Collapse>\r\n                        </div>\r\n                      </Accordion>\r\n                    </div>\r\n                  </Tab.Pane>\r\n                </Tab.Content>\r\n              </div>\r\n            </Tab.Container>\r\n          </div>*/}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OurFaqs;\r\n",{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","replacedBy":"379"},{"ruleId":"380","severity":1,"message":"381","line":41,"column":10,"nodeType":"382","messageId":"383","endLine":41,"endColumn":16},{"ruleId":"384","severity":1,"message":"385","line":42,"column":30,"nodeType":"386","messageId":"387","endLine":42,"endColumn":31,"suggestions":"388"},{"ruleId":"380","severity":1,"message":"389","line":251,"column":9,"nodeType":"382","messageId":"383","endLine":251,"endColumn":12},{"ruleId":"390","severity":1,"message":"391","line":277,"column":1,"nodeType":"392","messageId":"393","endLine":289,"endColumn":3},{"ruleId":"390","severity":1,"message":"394","line":291,"column":1,"nodeType":"392","messageId":"393","endLine":302,"endColumn":3},{"ruleId":"380","severity":1,"message":"395","line":2,"column":8,"nodeType":"382","messageId":"383","endLine":2,"endColumn":9},{"ruleId":"380","severity":1,"message":"396","line":9,"column":10,"nodeType":"382","messageId":"383","endLine":9,"endColumn":24},{"ruleId":"380","severity":1,"message":"397","line":13,"column":10,"nodeType":"382","messageId":"383","endLine":13,"endColumn":14},{"ruleId":"398","severity":1,"message":"399","line":37,"column":21,"nodeType":"400","endLine":37,"endColumn":33},{"ruleId":"398","severity":1,"message":"399","line":38,"column":21,"nodeType":"400","endLine":38,"endColumn":33},{"ruleId":"398","severity":1,"message":"399","line":39,"column":21,"nodeType":"400","endLine":39,"endColumn":33},{"ruleId":"398","severity":1,"message":"399","line":40,"column":21,"nodeType":"400","endLine":40,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":47,"column":21,"nodeType":"400","messageId":"403","endLine":47,"endColumn":80,"fix":"404"},{"ruleId":"401","severity":1,"message":"402","line":52,"column":21,"nodeType":"400","messageId":"403","endLine":55,"endColumn":22,"fix":"405"},{"ruleId":"401","severity":1,"message":"402","line":60,"column":21,"nodeType":"400","messageId":"403","endLine":63,"endColumn":22,"fix":"406"},{"ruleId":"401","severity":1,"message":"402","line":68,"column":21,"nodeType":"400","messageId":"403","endLine":68,"endColumn":73,"fix":"407"},{"ruleId":"401","severity":1,"message":"402","line":73,"column":21,"nodeType":"400","messageId":"403","endLine":73,"endColumn":79,"fix":"408"},{"ruleId":"401","severity":1,"message":"402","line":78,"column":21,"nodeType":"400","messageId":"403","endLine":81,"endColumn":22,"fix":"409"},{"ruleId":"398","severity":1,"message":"399","line":92,"column":7,"nodeType":"400","endLine":92,"endColumn":60},{"ruleId":"380","severity":1,"message":"410","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":19},{"ruleId":"380","severity":1,"message":"411","line":3,"column":21,"nodeType":"382","messageId":"383","endLine":3,"endColumn":24},{"ruleId":"380","severity":1,"message":"412","line":3,"column":26,"nodeType":"382","messageId":"383","endLine":3,"endColumn":29},{"ruleId":"380","severity":1,"message":"413","line":5,"column":10,"nodeType":"382","messageId":"383","endLine":5,"endColumn":19},{"ruleId":"380","severity":1,"message":"414","line":5,"column":21,"nodeType":"382","messageId":"383","endLine":5,"endColumn":28},{"ruleId":"380","severity":1,"message":"415","line":9,"column":3,"nodeType":"382","messageId":"383","endLine":9,"endColumn":19},{"ruleId":"380","severity":1,"message":"416","line":10,"column":3,"nodeType":"382","messageId":"383","endLine":10,"endColumn":16},{"ruleId":"380","severity":1,"message":"417","line":11,"column":3,"nodeType":"382","messageId":"383","endLine":11,"endColumn":11},{"ruleId":"380","severity":1,"message":"418","line":12,"column":3,"nodeType":"382","messageId":"383","endLine":12,"endColumn":13},{"ruleId":"380","severity":1,"message":"419","line":14,"column":10,"nodeType":"382","messageId":"383","endLine":14,"endColumn":22},{"ruleId":"380","severity":1,"message":"420","line":19,"column":10,"nodeType":"382","messageId":"383","endLine":19,"endColumn":20},{"ruleId":"380","severity":1,"message":"410","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":19},{"ruleId":"380","severity":1,"message":"411","line":3,"column":21,"nodeType":"382","messageId":"383","endLine":3,"endColumn":24},{"ruleId":"380","severity":1,"message":"412","line":3,"column":26,"nodeType":"382","messageId":"383","endLine":3,"endColumn":29},{"ruleId":"380","severity":1,"message":"381","line":3,"column":31,"nodeType":"382","messageId":"383","endLine":3,"endColumn":37},{"ruleId":"380","severity":1,"message":"421","line":4,"column":19,"nodeType":"382","messageId":"383","endLine":4,"endColumn":24},{"ruleId":"380","severity":1,"message":"422","line":1,"column":16,"nodeType":"382","messageId":"383","endLine":1,"endColumn":24},{"ruleId":"380","severity":1,"message":"423","line":14,"column":8,"nodeType":"382","messageId":"383","endLine":14,"endColumn":17},{"ruleId":"380","severity":1,"message":"424","line":15,"column":8,"nodeType":"382","messageId":"383","endLine":15,"endColumn":16},{"ruleId":"380","severity":1,"message":"425","line":25,"column":3,"nodeType":"382","messageId":"383","endLine":25,"endColumn":14},{"ruleId":"380","severity":1,"message":"426","line":26,"column":3,"nodeType":"382","messageId":"383","endLine":26,"endColumn":24},{"ruleId":"380","severity":1,"message":"427","line":27,"column":3,"nodeType":"382","messageId":"383","endLine":27,"endColumn":9},{"ruleId":"380","severity":1,"message":"428","line":30,"column":10,"nodeType":"382","messageId":"383","endLine":30,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":208,"column":23,"nodeType":"400","messageId":"403","endLine":208,"endColumn":87,"fix":"429"},{"ruleId":"401","severity":1,"message":"402","line":216,"column":23,"nodeType":"400","messageId":"403","endLine":216,"endColumn":82,"fix":"430"},{"ruleId":"401","severity":1,"message":"402","line":221,"column":23,"nodeType":"400","messageId":"403","endLine":221,"endColumn":96,"fix":"431"},{"ruleId":"401","severity":1,"message":"402","line":226,"column":23,"nodeType":"400","messageId":"403","endLine":226,"endColumn":106,"fix":"432"},{"ruleId":"401","severity":1,"message":"402","line":256,"column":25,"nodeType":"400","messageId":"403","endLine":256,"endColumn":80,"fix":"433"},{"ruleId":"380","severity":1,"message":"434","line":6,"column":10,"nodeType":"382","messageId":"383","endLine":6,"endColumn":22},{"ruleId":"380","severity":1,"message":"435","line":6,"column":24,"nodeType":"382","messageId":"383","endLine":6,"endColumn":35},{"ruleId":"380","severity":1,"message":"420","line":17,"column":10,"nodeType":"382","messageId":"383","endLine":17,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":23,"column":9,"nodeType":"400","messageId":"403","endLine":23,"endColumn":76,"fix":"436"},{"ruleId":"401","severity":1,"message":"402","line":79,"column":11,"nodeType":"400","messageId":"403","endLine":79,"endColumn":77,"fix":"437"},{"ruleId":"401","severity":1,"message":"402","line":89,"column":11,"nodeType":"400","messageId":"403","endLine":89,"endColumn":76,"fix":"438"},{"ruleId":"380","severity":1,"message":"439","line":7,"column":28,"nodeType":"382","messageId":"383","endLine":7,"endColumn":36},{"ruleId":"380","severity":1,"message":"414","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":17},{"ruleId":"380","severity":1,"message":"439","line":7,"column":10,"nodeType":"382","messageId":"383","endLine":7,"endColumn":18},{"ruleId":"380","severity":1,"message":"418","line":7,"column":20,"nodeType":"382","messageId":"383","endLine":7,"endColumn":30},{"ruleId":"380","severity":1,"message":"434","line":8,"column":10,"nodeType":"382","messageId":"383","endLine":8,"endColumn":22},{"ruleId":"380","severity":1,"message":"397","line":2,"column":10,"nodeType":"382","messageId":"383","endLine":2,"endColumn":14},{"ruleId":"380","severity":1,"message":"440","line":9,"column":8,"nodeType":"382","messageId":"383","endLine":9,"endColumn":18},{"ruleId":"380","severity":1,"message":"441","line":30,"column":7,"nodeType":"382","messageId":"383","endLine":30,"endColumn":14},{"ruleId":"401","severity":1,"message":"402","line":101,"column":11,"nodeType":"400","messageId":"403","endLine":104,"endColumn":12,"fix":"442"},{"ruleId":"380","severity":1,"message":"443","line":197,"column":9,"nodeType":"382","messageId":"383","endLine":197,"endColumn":18},{"ruleId":"444","severity":1,"message":"445","line":241,"column":6,"nodeType":"446","endLine":241,"endColumn":18,"suggestions":"447"},{"ruleId":"401","severity":1,"message":"402","line":337,"column":15,"nodeType":"400","messageId":"403","endLine":337,"endColumn":79,"fix":"448"},{"ruleId":"380","severity":1,"message":"410","line":3,"column":9,"nodeType":"382","messageId":"383","endLine":3,"endColumn":18},{"ruleId":"380","severity":1,"message":"411","line":3,"column":20,"nodeType":"382","messageId":"383","endLine":3,"endColumn":23},{"ruleId":"380","severity":1,"message":"412","line":3,"column":25,"nodeType":"382","messageId":"383","endLine":3,"endColumn":28},{"ruleId":"380","severity":1,"message":"381","line":3,"column":37,"nodeType":"382","messageId":"383","endLine":3,"endColumn":43},{"ruleId":"380","severity":1,"message":"449","line":8,"column":9,"nodeType":"382","messageId":"383","endLine":8,"endColumn":21},{"ruleId":"398","severity":1,"message":"399","line":87,"column":33,"nodeType":"400","endLine":87,"endColumn":67},{"ruleId":"398","severity":1,"message":"399","line":103,"column":33,"nodeType":"400","endLine":103,"endColumn":67},{"ruleId":"398","severity":1,"message":"399","line":119,"column":33,"nodeType":"400","endLine":119,"endColumn":67},{"ruleId":"398","severity":1,"message":"399","line":130,"column":33,"nodeType":"400","endLine":130,"endColumn":67},{"ruleId":"380","severity":1,"message":"450","line":6,"column":13,"nodeType":"382","messageId":"383","endLine":6,"endColumn":24},{"ruleId":"380","severity":1,"message":"451","line":224,"column":19,"nodeType":"382","messageId":"383","endLine":224,"endColumn":27},{"ruleId":"380","severity":1,"message":"451","line":267,"column":19,"nodeType":"382","messageId":"383","endLine":267,"endColumn":27},{"ruleId":"380","severity":1,"message":"452","line":383,"column":9,"nodeType":"382","messageId":"383","endLine":383,"endColumn":20},{"ruleId":"380","severity":1,"message":"422","line":1,"column":17,"nodeType":"382","messageId":"383","endLine":1,"endColumn":25},{"ruleId":"380","severity":1,"message":"453","line":1,"column":27,"nodeType":"382","messageId":"383","endLine":1,"endColumn":36},{"ruleId":"380","severity":1,"message":"454","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":25},{"ruleId":"380","severity":1,"message":"455","line":5,"column":3,"nodeType":"382","messageId":"383","endLine":5,"endColumn":15},{"ruleId":"380","severity":1,"message":"456","line":6,"column":3,"nodeType":"382","messageId":"383","endLine":6,"endColumn":19},{"ruleId":"380","severity":1,"message":"457","line":7,"column":3,"nodeType":"382","messageId":"383","endLine":7,"endColumn":16},{"ruleId":"380","severity":1,"message":"458","line":8,"column":3,"nodeType":"382","messageId":"383","endLine":8,"endColumn":10},{"ruleId":"380","severity":1,"message":"459","line":11,"column":13,"nodeType":"382","messageId":"383","endLine":11,"endColumn":20},{"ruleId":"380","severity":1,"message":"460","line":12,"column":8,"nodeType":"382","messageId":"383","endLine":12,"endColumn":13},{"ruleId":"380","severity":1,"message":"461","line":13,"column":10,"nodeType":"382","messageId":"383","endLine":13,"endColumn":15},{"ruleId":"380","severity":1,"message":"395","line":3,"column":8,"nodeType":"382","messageId":"383","endLine":3,"endColumn":9},{"ruleId":"380","severity":1,"message":"462","line":12,"column":5,"nodeType":"382","messageId":"383","endLine":12,"endColumn":14},{"ruleId":"463","severity":1,"message":"464","line":33,"column":9,"nodeType":"400","endLine":33,"endColumn":40},{"ruleId":"380","severity":1,"message":"410","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":19},{"ruleId":"380","severity":1,"message":"411","line":3,"column":21,"nodeType":"382","messageId":"383","endLine":3,"endColumn":24},{"ruleId":"380","severity":1,"message":"412","line":3,"column":26,"nodeType":"382","messageId":"383","endLine":3,"endColumn":29},{"ruleId":"380","severity":1,"message":"381","line":3,"column":31,"nodeType":"382","messageId":"383","endLine":3,"endColumn":37},{"ruleId":"380","severity":1,"message":"465","line":46,"column":7,"nodeType":"382","messageId":"383","endLine":46,"endColumn":14},{"ruleId":"463","severity":1,"message":"464","line":60,"column":9,"nodeType":"400","endLine":60,"endColumn":40},{"ruleId":"380","severity":1,"message":"466","line":20,"column":9,"nodeType":"382","messageId":"383","endLine":20,"endColumn":18},{"ruleId":"380","severity":1,"message":"453","line":1,"column":27,"nodeType":"382","messageId":"383","endLine":1,"endColumn":36},{"ruleId":"380","severity":1,"message":"397","line":2,"column":10,"nodeType":"382","messageId":"383","endLine":2,"endColumn":14},{"ruleId":"380","severity":1,"message":"414","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":17},{"ruleId":"380","severity":1,"message":"467","line":5,"column":8,"nodeType":"382","messageId":"383","endLine":5,"endColumn":16},{"ruleId":"380","severity":1,"message":"468","line":6,"column":8,"nodeType":"382","messageId":"383","endLine":6,"endColumn":15},{"ruleId":"380","severity":1,"message":"469","line":7,"column":8,"nodeType":"382","messageId":"383","endLine":7,"endColumn":15},{"ruleId":"380","severity":1,"message":"470","line":8,"column":8,"nodeType":"382","messageId":"383","endLine":8,"endColumn":22},{"ruleId":"380","severity":1,"message":"440","line":9,"column":8,"nodeType":"382","messageId":"383","endLine":9,"endColumn":18},{"ruleId":"380","severity":1,"message":"471","line":10,"column":8,"nodeType":"382","messageId":"383","endLine":10,"endColumn":16},{"ruleId":"380","severity":1,"message":"472","line":11,"column":8,"nodeType":"382","messageId":"383","endLine":11,"endColumn":17},{"ruleId":"380","severity":1,"message":"396","line":13,"column":10,"nodeType":"382","messageId":"383","endLine":13,"endColumn":24},{"ruleId":"380","severity":1,"message":"419","line":13,"column":26,"nodeType":"382","messageId":"383","endLine":13,"endColumn":38},{"ruleId":"380","severity":1,"message":"434","line":14,"column":10,"nodeType":"382","messageId":"383","endLine":14,"endColumn":22},{"ruleId":"380","severity":1,"message":"435","line":14,"column":24,"nodeType":"382","messageId":"383","endLine":14,"endColumn":35},{"ruleId":"380","severity":1,"message":"473","line":16,"column":3,"nodeType":"382","messageId":"383","endLine":16,"endColumn":12},{"ruleId":"380","severity":1,"message":"417","line":17,"column":3,"nodeType":"382","messageId":"383","endLine":17,"endColumn":11},{"ruleId":"380","severity":1,"message":"474","line":18,"column":3,"nodeType":"382","messageId":"383","endLine":18,"endColumn":11},{"ruleId":"380","severity":1,"message":"475","line":19,"column":3,"nodeType":"382","messageId":"383","endLine":19,"endColumn":14},{"ruleId":"380","severity":1,"message":"418","line":20,"column":3,"nodeType":"382","messageId":"383","endLine":20,"endColumn":13},{"ruleId":"380","severity":1,"message":"420","line":22,"column":10,"nodeType":"382","messageId":"383","endLine":22,"endColumn":20},{"ruleId":"380","severity":1,"message":"476","line":24,"column":8,"nodeType":"382","messageId":"383","endLine":24,"endColumn":20},{"ruleId":"380","severity":1,"message":"477","line":25,"column":8,"nodeType":"382","messageId":"383","endLine":25,"endColumn":16},{"ruleId":"380","severity":1,"message":"478","line":26,"column":10,"nodeType":"382","messageId":"383","endLine":26,"endColumn":19},{"ruleId":"380","severity":1,"message":"479","line":26,"column":21,"nodeType":"382","messageId":"383","endLine":26,"endColumn":39},{"ruleId":"380","severity":1,"message":"480","line":27,"column":10,"nodeType":"382","messageId":"383","endLine":27,"endColumn":25},{"ruleId":"380","severity":1,"message":"481","line":28,"column":10,"nodeType":"382","messageId":"383","endLine":28,"endColumn":18},{"ruleId":"380","severity":1,"message":"482","line":28,"column":20,"nodeType":"382","messageId":"383","endLine":28,"endColumn":26},{"ruleId":"380","severity":1,"message":"483","line":39,"column":10,"nodeType":"382","messageId":"383","endLine":39,"endColumn":16},{"ruleId":"380","severity":1,"message":"484","line":39,"column":18,"nodeType":"382","messageId":"383","endLine":39,"endColumn":27},{"ruleId":"401","severity":1,"message":"402","line":49,"column":17,"nodeType":"400","messageId":"403","endLine":49,"endColumn":82,"fix":"485"},{"ruleId":"401","severity":1,"message":"402","line":59,"column":17,"nodeType":"400","messageId":"403","endLine":59,"endColumn":82,"fix":"486"},{"ruleId":"401","severity":1,"message":"402","line":69,"column":17,"nodeType":"400","messageId":"403","endLine":69,"endColumn":82,"fix":"487"},{"ruleId":"401","severity":1,"message":"402","line":84,"column":17,"nodeType":"400","messageId":"403","endLine":84,"endColumn":89,"fix":"488"},{"ruleId":"401","severity":1,"message":"402","line":94,"column":17,"nodeType":"400","messageId":"403","endLine":94,"endColumn":88,"fix":"489"},{"ruleId":"380","severity":1,"message":"453","line":1,"column":27,"nodeType":"382","messageId":"383","endLine":1,"endColumn":36},{"ruleId":"380","severity":1,"message":"397","line":2,"column":10,"nodeType":"382","messageId":"383","endLine":2,"endColumn":14},{"ruleId":"380","severity":1,"message":"490","line":2,"column":16,"nodeType":"382","messageId":"383","endLine":2,"endColumn":23},{"ruleId":"380","severity":1,"message":"414","line":3,"column":10,"nodeType":"382","messageId":"383","endLine":3,"endColumn":17},{"ruleId":"380","severity":1,"message":"467","line":5,"column":8,"nodeType":"382","messageId":"383","endLine":5,"endColumn":16},{"ruleId":"380","severity":1,"message":"468","line":6,"column":8,"nodeType":"382","messageId":"383","endLine":6,"endColumn":15},{"ruleId":"380","severity":1,"message":"469","line":7,"column":8,"nodeType":"382","messageId":"383","endLine":7,"endColumn":15},{"ruleId":"380","severity":1,"message":"470","line":8,"column":8,"nodeType":"382","messageId":"383","endLine":8,"endColumn":22},{"ruleId":"380","severity":1,"message":"440","line":9,"column":8,"nodeType":"382","messageId":"383","endLine":9,"endColumn":18},{"ruleId":"380","severity":1,"message":"471","line":10,"column":8,"nodeType":"382","messageId":"383","endLine":10,"endColumn":16},{"ruleId":"380","severity":1,"message":"472","line":11,"column":8,"nodeType":"382","messageId":"383","endLine":11,"endColumn":17},{"ruleId":"380","severity":1,"message":"491","line":12,"column":8,"nodeType":"382","messageId":"383","endLine":12,"endColumn":22},{"ruleId":"380","severity":1,"message":"396","line":13,"column":10,"nodeType":"382","messageId":"383","endLine":13,"endColumn":24},{"ruleId":"380","severity":1,"message":"419","line":13,"column":26,"nodeType":"382","messageId":"383","endLine":13,"endColumn":38},{"ruleId":"380","severity":1,"message":"434","line":14,"column":10,"nodeType":"382","messageId":"383","endLine":14,"endColumn":22},{"ruleId":"380","severity":1,"message":"435","line":14,"column":24,"nodeType":"382","messageId":"383","endLine":14,"endColumn":35},{"ruleId":"380","severity":1,"message":"473","line":16,"column":3,"nodeType":"382","messageId":"383","endLine":16,"endColumn":12},{"ruleId":"380","severity":1,"message":"417","line":17,"column":3,"nodeType":"382","messageId":"383","endLine":17,"endColumn":11},{"ruleId":"380","severity":1,"message":"474","line":18,"column":3,"nodeType":"382","messageId":"383","endLine":18,"endColumn":11},{"ruleId":"380","severity":1,"message":"475","line":19,"column":3,"nodeType":"382","messageId":"383","endLine":19,"endColumn":14},{"ruleId":"380","severity":1,"message":"418","line":20,"column":3,"nodeType":"382","messageId":"383","endLine":20,"endColumn":13},{"ruleId":"380","severity":1,"message":"420","line":22,"column":10,"nodeType":"382","messageId":"383","endLine":22,"endColumn":20},{"ruleId":"380","severity":1,"message":"476","line":24,"column":8,"nodeType":"382","messageId":"383","endLine":24,"endColumn":20},{"ruleId":"380","severity":1,"message":"477","line":25,"column":8,"nodeType":"382","messageId":"383","endLine":25,"endColumn":16},{"ruleId":"380","severity":1,"message":"478","line":26,"column":10,"nodeType":"382","messageId":"383","endLine":26,"endColumn":19},{"ruleId":"380","severity":1,"message":"479","line":26,"column":21,"nodeType":"382","messageId":"383","endLine":26,"endColumn":39},{"ruleId":"380","severity":1,"message":"480","line":27,"column":10,"nodeType":"382","messageId":"383","endLine":27,"endColumn":25},{"ruleId":"380","severity":1,"message":"481","line":28,"column":10,"nodeType":"382","messageId":"383","endLine":28,"endColumn":18},{"ruleId":"380","severity":1,"message":"482","line":28,"column":20,"nodeType":"382","messageId":"383","endLine":28,"endColumn":26},{"ruleId":"380","severity":1,"message":"492","line":30,"column":8,"nodeType":"382","messageId":"383","endLine":30,"endColumn":11},{"ruleId":"380","severity":1,"message":"493","line":31,"column":8,"nodeType":"382","messageId":"383","endLine":31,"endColumn":11},{"ruleId":"380","severity":1,"message":"494","line":32,"column":8,"nodeType":"382","messageId":"383","endLine":32,"endColumn":17},{"ruleId":"380","severity":1,"message":"495","line":36,"column":10,"nodeType":"382","messageId":"383","endLine":36,"endColumn":23},{"ruleId":"380","severity":1,"message":"496","line":41,"column":9,"nodeType":"382","messageId":"383","endLine":41,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":59,"column":29,"nodeType":"400","messageId":"403","endLine":59,"endColumn":101,"fix":"497"},{"ruleId":"401","severity":1,"message":"402","line":61,"column":42,"nodeType":"400","messageId":"403","endLine":61,"endColumn":113,"fix":"498"},{"ruleId":"401","severity":1,"message":"402","line":68,"column":136,"nodeType":"400","messageId":"403","endLine":68,"endColumn":186,"fix":"499"},{"ruleId":"401","severity":1,"message":"402","line":69,"column":97,"nodeType":"400","messageId":"403","endLine":69,"endColumn":147,"fix":"500"},{"ruleId":"401","severity":1,"message":"402","line":123,"column":17,"nodeType":"400","messageId":"403","endLine":123,"endColumn":88,"fix":"501"},{"ruleId":"401","severity":1,"message":"402","line":147,"column":94,"nodeType":"400","messageId":"403","endLine":147,"endColumn":145,"fix":"502"},{"ruleId":"401","severity":1,"message":"402","line":154,"column":318,"nodeType":"400","messageId":"403","endLine":154,"endColumn":389,"fix":"503"},{"ruleId":"401","severity":1,"message":"402","line":164,"column":55,"nodeType":"400","messageId":"403","endLine":164,"endColumn":105,"fix":"504"},"no-native-reassign",["505"],"no-negated-in-lhs",["506"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["507","508"],"'max' is assigned a value but never used.","no-extend-native","Object prototype is read only, properties should not be added.","CallExpression","unexpected","Array prototype is read only, properties should not be added.","'_' is defined but never used.","'fromXdcAddress' is defined but never used.","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"509","text":"510"},{"range":"511","text":"510"},{"range":"512","text":"510"},{"range":"513","text":"510"},{"range":"514","text":"510"},{"range":"515","text":"510"},"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'isAddress' is defined but never used.","'fromWei' is defined but never used.","'BUILD_BLOCK_LINK' is defined but never used.","'BUILD_TX_LINK' is defined but never used.","'EXPLORER' is defined but never used.","'RemoveExpo' is defined but never used.","'toXdcAddress' is defined but never used.","'LOADER_BOX' is defined but never used.","'toWei' is defined but never used.","'useState' is defined but never used.","'loginIcon' is defined but never used.","'signIcon' is defined but never used.","'faEllipsisH' is defined but never used.","'faExclamationTriangle' is defined but never used.","'faHome' is defined but never used.","'SubmitContractTxGeneral' is defined but never used.",{"range":"516","text":"510"},{"range":"517","text":"510"},{"range":"518","text":"510"},{"range":"519","text":"510"},{"range":"520","text":"510"},"'FormatNumber' is defined but never used.","'FormatToken' is defined but never used.",{"range":"521","text":"510"},{"range":"522","text":"510"},{"range":"523","text":"510"},"'DECIMALS' is defined but never used.","'rocketIcon' is defined but never used.","'Options' is assigned a value but never used.",{"range":"524","text":"510"},"'nodeCount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array. If 'filterData' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["525"],{"range":"526","text":"510"},"'PROJECT_NAME' is defined but never used.","'dcentBridge' is defined but never used.","'gasLimit' is assigned a value but never used.","'allAccounts' is assigned a value but never used.","'useEffect' is defined but never used.","'GetRevertReason' is defined but never used.","'CONTRACT_ABI' is defined but never used.","'CONTRACT_ADDRESS' is defined but never used.","'HTTP_PROVIDER' is defined but never used.","'LOADERS' is defined but never used.","'actions' is defined but never used.","'store' is defined but never used.","'toast' is defined but never used.","'addresses' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","'btnName' is assigned a value but never used.","'submitBtn' is assigned a value but never used.","'FarmNode' is defined but never used.","'Staking' is defined but never used.","'Rewards' is defined but never used.","'HostingRewards' is defined but never used.","'tickIcon' is defined but never used.","'crossIcon' is defined but never used.","'ADDR_LINK' is defined but never used.","'Paginate' is defined but never used.","'PaginateNav' is defined but never used.","'GeneralModal' is defined but never used.","'WorldMap' is defined but never used.","'FlexTable' is defined but never used.","'InitStackableTable' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faSearch' is defined but never used.","'faStar' is defined but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.",{"range":"527","text":"510"},{"range":"528","text":"510"},{"range":"529","text":"510"},{"range":"530","text":"510"},{"range":"531","text":"510"},"'NavLink' is defined but never used.","'rightArrowIcon' is defined but never used.","'Nav' is defined but never used.","'Tab' is defined but never used.","'Accordion' is defined but never used.","'openAccordion' is assigned a value but never used.","'handleAccordionToggle' is assigned a value but never used.",{"range":"532","text":"510"},{"range":"533","text":"510"},{"range":"534","text":"510"},{"range":"535","text":"510"},{"range":"536","text":"510"},{"range":"537","text":"510"},{"range":"538","text":"510"},{"range":"539","text":"510"},"no-global-assign","no-unsafe-negation",{"messageId":"540","fix":"541","desc":"542"},{"messageId":"543","fix":"544","desc":"545"},[1897,1897]," rel=\"noreferrer\"",[2211,2211],[2540,2540],[2811,2811],[3066,3066],[3371,3371],[6449,6449],[6763,6763],[7005,7005],[7257,7257],[8514,8514],[676,676],[2108,2108],[2450,2450],[3250,3250],{"desc":"546","fix":"547"},[10949,10949],[1852,1852],[2248,2248],[2645,2645],[3223,3223],[3624,3624],[2498,2498],[2687,2687],[3175,3175],[3381,3381],[6358,6358],[7758,7758],[8529,8529],[9220,9220],"removeEscape",{"range":"548","text":"549"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"550","text":"551"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [addrFilter, filterData]",{"range":"552","text":"553"},[1167,1168],"",[1167,1167],"\\",[7322,7334],"[addrFilter, filterData]"]